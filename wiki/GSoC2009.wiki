#summary Home page for GSoC 2009 project on OpenCL implementation of beagle-lib.

== Overview ==
As part of the Google Summer of Code 2009 program, Daniel Ayres will implement an OpenCL version of beagle-lib.

=== Description ===
This project will implement an open-source C++ library to compute phylogenetic tree likelihoods on the GPU, with the core loops in OpenCL. Currently in phylogenetic inference there is a strong demand for more computational speed and typically likelihood calculation is the main bottleneck. Moving to GPU acceleration is a natural step to address that issue, as significant speedups in likelihood calculation have been observed both in my work and in that of others. The library will make use of the OpenCL framework, an open standard for general-purpose computation on GPUs. This hardware-independent, GPU-accelerated implementation of a likelihood calculation library has the potential of benefiting several state-of-the-art evolutionary analysis packages.

The OpenCL library will be a continuation of the beagle-lib project hosted on this site.

== Project goals ==
 * Implements the minimum interface to compute tree likelihoods for BEAST
 * Implements additional interface elements for compatibility with other state-of-the-art phylogenetic software. Preliminarily these will be GARLI and !MrBayes
 * Achieves significant speedups over current CPU implementations
 * Includes bindings for higher-level languages
 * Is well-documented

== Project Plan ==

=== Preparation weeks ===
 * Learned more about OpenCL
 * Installed Snow Leopard and got familiarized with OpenCL examples
 * Learned more about CUDA Driver API
 * Tested autotools version of beagle-lib and documented issues on Google Code
 * Cloned trunk of beagle-lib into opencl-dev branch
 * Created project home page and documented current plan
 * Created preliminary logo for beagle-lib

=== 05/23 - 05/30 ===
 * Participated in a workgroup with the developers of the top phylogenetic and population genetic software today. This group had the purpose of defining a new API for beagle which would allow it to be used by these programs.
 * Gave presentation on GPU programming model for CUDA and OpenCL for the group. Also presented on previous work done on likelihood calculation on GPUs. 
 * Together with workgroup participants, defined a new interface for the beagle library. (specifically beagle.h was modified)
 * Together with workgroup participants, updated the reference CPU implementation to match the new API. (among others BeagleCPUImpl.cpp was modified)
 * Set up Xcode project for the library and test cases to ease debugging process.

=== 05/30 - 06/06 ===
 * Adapted CUDA implementation to comply with most new API functions in beagle.h
  * missing all but setTransitionMatrix, calculateEdgeLogLikelihoods
  * works with tinyTest
 * Cleaned up CUDA and CPU code significantly and fixed several bugs

=== 06/06 - 06/13 ===
 * Continue to implement new functionality in CUDA implementation related to new API, most importantly calcEdgeLogLikelhood
 * Begin porting of  beagle-lib to CUDA driver API
  * Split .cu files (CUDASharedFunctions_kernel.cu, Peeling_kernel.cu, TransitionProbabilities_kernel.cu) so that GPU kernels are not mixed with with CPU code.
  * Create new c files by extracting the host-side functions found in the .cu files above

=== 06/13 - 06/20 ===
 * Finish porting of current beagle-lib to CUDA driver API
   * Continue converting C for CUDA calls to Driver API ones.
   * Test modifications.
 * Begin work on OpenCL implementation
   * Convert CUDA Driver API host code to OpenCL 

=== 06/20 - 06/27 ===
 * Work on autotools issues 
   * Fix OS X compatibility issues [http://code.google.com/p/beagle-lib/issues/list]
 * Continue work on OpenCL implementation
   * Convert CUDA GPU kernels to OpenCL

== Deliverables ==

=== 05/30 ===
 * new API defined

=== 06/20 ===
 * CUDA driver API port of beagle-lib

=== 08/23 ===
 * OpenCL implementation of beagle-lib

== Decision Discussion ==
=== Convert beagle-lib CUDA implementation to CUDA Driver API ===
Although the driver API is more complex, it will allow for much easier transition to OpenCL. And, since we intend to maintain both CUDA and OpenCL implementations of beagle-lib, it makes sense for these to be as similar as possible.

== Documentation ==