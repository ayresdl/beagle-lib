#summary Meeting notes from Cesky Krumlov 2010/19/01.

= Introduction =

Participants:

  * Daniel Ayres
  * Peter Beerli
  * Michael Cummings
  * Paul Lewis
  * Andrew Rambaut
  * Fredrik Ronquist
  * David Swofford

= Details =

Proposed changes:
  * Add auto-scale and always-scale flags to beagle
    * auto-scale should report back its scaling method at *beagleInitializeInstance* via *BeagleInstanceDetails*
    * initial auto-scale implementation will be equivalent to always-scale
    * later implementation would involve check for a threshold value which would trigger rescaling

  * Break up *beagleCalculateRootLogLikelihoods* and *beagleCalculateEdgeLogLikelihoods* so that *inWeights* and *inStateFrequencies* are set in separate calls

== Specific proposed changes to API: ==

  # small changes to allow selection of autoscaling
  Add flags to BeagleFlags enum:
  {{{
BEAGLE_FLAG_AUTO_SCALE = 1 << 6,    /`*``*`< beagle autoscaling on `*`/
BEAGLE_FLAG_ALWAYS_SCALE = 1 <<7,    /`*``*`< beagle scales at every update `*`/
  }}}
  Change to contract for 'beagleCreateInstance':
  {{{
`*` @param scaleBufferCount		Number of scale buffers to create, ignored for auto scale or always scale (input)
  }}}
  # suggested changes to beagleCalculateRootLogLikelihoods and beagleCalculateEdgeLogLikelihoods:
  Require setting of state frequencies and category rates before call:
  {{{
BEAGLE_DLLEXPORT int setCategoryWeights(int categoryWeightsIndex, const double* inWeights);
BEAGLE_DLLEXPORT int setStateFrequencies(int stateFrequenciesIndex,  const double* inStateFrequencies);
}}}
  We set the weights for each pattern so the sum log likelihood can be returned:
  {{{
BEAGLE_DLLEXPORT int setPatternWeights(const double* inPatternWeights);
  }}}
  * *beagleCalculateRootLogLikelihoods* then takes indices that refer to the above. This also just returns the sum of log likelihoods.
  {{{
BEAGLE_DLLEXPORT int beagleCalculateRootLogLikelihoods(int instance,
                                      const int* bufferIndices,
                                      const int* categoryWeightsIndices,
                                      const int* stateFrequenciesIndices,
                                      int count,
                                      double* outSumLogLikelihood);
  }}}
  Finally, if available, the individual site log likelihoods can be obtained:
  {{{
BEAGLE_DLLEXPORT int getLogLikelihoods(double* outLogLikelihoods);
  }}}

== Discuss further: ==

  * Have  *beagleCalculateRootLogLikelihoods* and *beagleCalculateEdgeLogLikelihoods*  optionally return the total likelihood and derivatives