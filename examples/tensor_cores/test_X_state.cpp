/*
 *  tinyTest.c
 *  BEAGLE
 *
 *  Created by Andrew Rambaut on 20/03/2009.
 *  Copyright 2009 __MyCompanyName__. All rights reserved.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <libhmsbeagle/BeagleImpl.h>
#include <cmath>
#include <vector>

//#define JC

#ifdef _WIN32
#include <vector>
#endif

#include "libhmsbeagle/beagle.h"

const int STATE_SIZE = 16;
const bool IS_CODON = true;

char aminoAcids[] = {'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V'};
std::string stateSpace[STATE_SIZE] = {
        "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013"
};

char *human = (char*)"002001003006007008400500";
char *chimp = (char*)"013001009010011002003012";
char *gorilla = (char*)"004005006007003008009010011";


//char *human = (char*)"002001003006007008400500";
//char *chimp = (char*)"013001009010011002003012";
//char *gorilla = (char*)"004005006007003008009010011";

// Q matrix for JTT
//double** rate = new double*[20];

//char *human = (char*)"EG";
//char *chimp = (char*)"GR";
//char *gorilla = (char*)"RE";

//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTA";

//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTATTTCTACTAGGACTATGAGAATCGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTATTTCTACTAGGACTATAAGAATCGAACTCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTATTTCTACTAGGACTATGAGAATTGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTGTCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTATTTCTACTAGGACTATGAGAATCGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTTATACCCTTCCCGTACTAAGAAATTTAGGTTAAATACAGACCAAGAGCCTTCAAAGCCCTCAGTAAGTTG-CAATACTTAATTTCTGTAAGGACTGCAAAACCCCACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGACCAATGGGACTTAAACCCACAAACACTTAGTTAACAGCTAAGCACCCTAATCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAA-TCACCTCGGAGCTTGGTAAAAAGAGGCCTAACCCCTGTCTTTAGATTTACAGTCCAATGCTTCA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCCAAAGCTGGTTTCAAGCCAACCCCATGGCCTCCATGACTTTTTCAAAAGGTATTAGAAAAACCATTTCATAACTTTGTCAAAGTTAAATTATAGGCT-AAATCCTATATATCTTA-CACTGTAAAGCTAACTTAGCATTAACCTTTTAAGTTAAAGATTAAGAGAACCAACACCTCTTTACAGTGA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTATTTCTACTAGGACTATAAGAATCGAACTCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTTACACCCTTCCCGTACTAAGAAATTTAGGTTAAGCACAGACCAAGAGCCTTCAAAGCCCTCAGCAAGTTA-CAATACTTAATTTCTGTAAGGACTGCAAAACCCCACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGATTAATGGGACTTAAACCCACAAACATTTAGTTAACAGCTAAACACCCTAATCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAA-TCACCTCAGAGCTTGGTAAAAAGAGGCTTAACCCCTGTCTTTAGATTTACAGTCCAATGCTTCA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCTAAAGCTGGTTTCAAGCCAACCCCATGACCTCCATGACTTTTTCAAAAGATATTAGAAAAACTATTTCATAACTTTGTCAAAGTTAAATTACAGGTT-AACCCCCGTATATCTTA-CACTGTAAAGCTAACCTAGCATTAACCTTTTAAGTTAAAGATTAAGAGGACCGACACCTCTTTACAGTGA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTATTTCTACTAGGACTATGAGAATTGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTGTCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTCACATCCTTCCCGTACTAAGAAATTTAGGTTAAACATAGACCAAGAGCCTTCAAAGCCCTTAGTAAGTTA-CAACACTTAATTTCTGTAAGGACTGCAAAACCCTACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGATCAATGGGACTCAAACCCACAAACATTTAGTTAACAGCTAAACACCCTAGTCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAT-TCACCTCGGAGCTTGGTAAAAAGAGGCCCAGCCTCTGTCTTTAGATTTACAGTCCAATGCCTTA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCCAAAGCTGGTTTCAAGCCAACCCCATGACCTTCATGACTTTTTCAAAAGATATTAGAAAAACTATTTCATAACTTTGTCAAGGTTAAATTACGGGTT-AAACCCCGTATATCTTA-CACTGTAAAGCTAACCTAGCGTTAACCTTTTAAGTTAAAGATTAAGAGTATCGGCACCTCTTTGCAGTGA";

std::vector<std::string> convertSequenceToVector(char *sequence, bool is_codon) {
    std::vector<std::string> result;
    int nchar = is_codon ? 3 : 1;
    int n = strlen(sequence) / nchar;

    // Iterate through the string and extract substrings of length 3
    for (int i = 0; i < n; ++i)
    {
        std::string state(sequence + (i * nchar), nchar);
        result.push_back(state);
    }

    return result;
}

int* getStates(std::vector<std::string> sequence, int repeats) {
    int n = sequence.size();
    int *states = (int*) malloc(sizeof(int) * n * repeats);

    int k = 0;
    std::string *el;
    std::vector<std::string>::iterator sequenceItr;
    for (int r = 0; r < repeats; ++r) {
        for(sequenceItr = sequence.begin(); sequenceItr != sequence.end(); sequenceItr++) {
            el = std::find(std::begin(stateSpace), std::end(stateSpace), *sequenceItr);
            if(el == std::end(stateSpace)){
                states[k++] = STATE_SIZE;
            } else {
                states[k++] = std::distance(stateSpace, el);
            }
        }
    }
    return states;
}

void print_test(){

}

double* getPartials(std::vector<std::string> sequence, int repeats) {
    int n = sequence.size();
    double *partials = (double*)malloc(sizeof(double) * n * STATE_SIZE);

    int k = 0;
    std::string *el;
    std::vector<std::string>::iterator sequenceItr;
    for(sequenceItr = sequence.begin(); sequenceItr != sequence.end(); sequenceItr++) {
        el = std::find(std::begin(stateSpace), std::end(stateSpace), *sequenceItr);
        if(el == std::end(stateSpace)){
            for(int j = 0; j < STATE_SIZE; j++){
                partials[k++] = 1;
            }
        } else {
            for(int j = 0; j < STATE_SIZE; j++){
                if(j == std::distance(stateSpace, el)) {
                    partials[k++] = 1;
                } else {
                    partials[k++] = 0;
                }
            }
        }
    }
    return partials;
}

void printFlags(long inFlags) {
    if (inFlags & BEAGLE_FLAG_PROCESSOR_CPU)      fprintf(stdout, " PROCESSOR_CPU");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_GPU)      fprintf(stdout, " PROCESSOR_GPU");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_FPGA)     fprintf(stdout, " PROCESSOR_FPGA");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_CELL)     fprintf(stdout, " PROCESSOR_CELL");
    if (inFlags & BEAGLE_FLAG_PRECISION_DOUBLE)   fprintf(stdout, " PRECISION_DOUBLE");
    if (inFlags & BEAGLE_FLAG_PRECISION_SINGLE)   fprintf(stdout, " PRECISION_SINGLE");
    if (inFlags & BEAGLE_FLAG_COMPUTATION_ASYNCH) fprintf(stdout, " COMPUTATION_ASYNCH");
    if (inFlags & BEAGLE_FLAG_COMPUTATION_SYNCH)  fprintf(stdout, " COMPUTATION_SYNCH");
    if (inFlags & BEAGLE_FLAG_EIGEN_REAL)         fprintf(stdout, " EIGEN_REAL");
    if (inFlags & BEAGLE_FLAG_EIGEN_COMPLEX)      fprintf(stdout, " EIGEN_COMPLEX");
    if (inFlags & BEAGLE_FLAG_SCALING_MANUAL)     fprintf(stdout, " SCALING_MANUAL");
    if (inFlags & BEAGLE_FLAG_SCALING_AUTO)       fprintf(stdout, " SCALING_AUTO");
    if (inFlags & BEAGLE_FLAG_SCALING_ALWAYS)     fprintf(stdout, " SCALING_ALWAYS");
    if (inFlags & BEAGLE_FLAG_SCALING_DYNAMIC)    fprintf(stdout, " SCALING_DYNAMIC");
    if (inFlags & BEAGLE_FLAG_SCALERS_RAW)        fprintf(stdout, " SCALERS_RAW");
    if (inFlags & BEAGLE_FLAG_SCALERS_LOG)        fprintf(stdout, " SCALERS_LOG");
    if (inFlags & BEAGLE_FLAG_VECTOR_NONE)        fprintf(stdout, " VECTOR_NONE");
    if (inFlags & BEAGLE_FLAG_VECTOR_SSE)         fprintf(stdout, " VECTOR_SSE");
    if (inFlags & BEAGLE_FLAG_VECTOR_AVX)         fprintf(stdout, " VECTOR_AVX");
    if (inFlags & BEAGLE_FLAG_THREADING_NONE)     fprintf(stdout, " THREADING_NONE");
    if (inFlags & BEAGLE_FLAG_THREADING_OPENMP)   fprintf(stdout, " THREADING_OPENMP");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_CPU)      fprintf(stdout, " FRAMEWORK_CPU");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_CUDA)     fprintf(stdout, " FRAMEWORK_CUDA");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_OPENCL)   fprintf(stdout, " FRAMEWORK_OPENCL");
}

int main( int argc, const char* argv[] )
{
    // print resource list
    BeagleResourceList* rList;
    rList = beagleGetResourceList();
    fprintf(stdout, "Available resources:\n");
    for (int i = 0; i < rList->length; i++) {
        fprintf(stdout, "\tResource %i:\n\t\tName : %s\n", i, rList->list[i].name);
        fprintf(stdout, "\t\tDesc : %s\n", rList->list[i].description);
        fprintf(stdout, "\t\tFlags:");
        printFlags(rList->list[i].supportFlags);
        fprintf(stdout, "\n");
    }
    fprintf(stdout, "\n");

//    bool scaling = true;
    bool scaling = false; // disable scaling for now

    bool doJC = true;

    bool singlePrecision = false;
    bool useSSE = false;

    int stateCount = STATE_SIZE;

    int nRepeats = 1;

    // get the number of site patterns
    int nPatterns = (IS_CODON) ? (strlen(human) / 3) * nRepeats : strlen(human) * nRepeats;

    // change # rate category to 2
//    int rateCategoryCount = 4;
    int rateCategoryCount = 1;

    int scaleCount = (scaling ? 7 : 0);

    bool useGpu = true;
    bool useTensorCores = true;

    bool useTipStates = false;

    // int whichDevice = -1;
    // if (useGpu) {
    //     if (argc > 2) {
    //         whichDevice = atol(argv[2]);
    //         if (whichDevice < 0) {
    //             whichDevice = -1;
    //         }
    //     }
    // }
    int *whichDevice = new int[1];
    whichDevice[0] = 1;

    BeagleInstanceDetails instDetails;

    long preferenceFlags = BEAGLE_FLAG_SCALERS_RAW;

    if (useGpu) {
        preferenceFlags |= BEAGLE_FLAG_PROCESSOR_GPU;
    } else {
        preferenceFlags |= BEAGLE_FLAG_PROCESSOR_CPU;
    }

    if (singlePrecision) {
        preferenceFlags |= BEAGLE_FLAG_PRECISION_SINGLE;
    } else {
        preferenceFlags |= BEAGLE_FLAG_PRECISION_DOUBLE;
    }

    long requirementFlags = BEAGLE_FLAG_EIGEN_REAL;
    if(useGpu && useTensorCores) {
        requirementFlags |= BEAGLE_FLAG_VECTOR_TENSOR;
        requirementFlags |= BEAGLE_FLAG_FRAMEWORK_CUDA;
    } else if (useSSE) {
        requirementFlags |= BEAGLE_FLAG_VECTOR_SSE;
    } else {
        requirementFlags |= BEAGLE_FLAG_VECTOR_NONE;
    }

    // create an instance of the BEAGLE library
    int instance = beagleCreateInstance(
            3,				/**< Number of tip data elements (input) */
            10,	            /**< Number of partials buffers to create (input) */
            useTipStates ? 3 : 0,		        /**< Number of compact state representation buffers to create (input) */
            stateCount,		/**< Number of states in the continuous-time Markov chain (input) */
            nPatterns,		/**< Number of site patterns to be handled by the instance (input) */
            1,		        /**< Number of rate matrix eigen-decomposition buffers to allocate (input) */
            6 * 2,		    /**< Number of rate matrix buffers (input) */
            rateCategoryCount,/**< Number of rate categories (input) */
            scaleCount,       /**< Number of scaling buffers */
            whichDevice, /**< List of potential resource on which this instance is allowed (input, NULL implies no restriction */
            1,			    /**< Length of resourceList list (input) */
            preferenceFlags,
            requirementFlags, /**< Bit-flags indicating required implementation characteristics, see BeagleFlags (input) */
            &instDetails);
    if (instance < 0) {
        fprintf(stderr, "Failed to obtain BEAGLE instance\n\n");
        exit(1);
    }


    int rNumber = instDetails.resourceNumber;
    fprintf(stdout, "Using resource %i:\n", rNumber);
    fprintf(stdout, "\tRsrc Name : %s\n",instDetails.resourceName);
    fprintf(stdout, "\tImpl Name : %s\n", instDetails.implName);
    fprintf(stdout, "\tImpl Desc : %s\n", instDetails.implDescription);
    fprintf(stdout, "\n");

    if (useTipStates) {
        // set the sequences for each tip using state likelihood arrays
//        int *humanStates = getStates(human, nRepeats);
//        int *chimpStates = getStates(chimp, nRepeats);
//        int *gorillaStates = getStates(gorilla, nRepeats);
//
//        beagleSetTipStates(instance, 0, humanStates);
//        beagleSetTipStates(instance, 1, chimpStates);
//        beagleSetTipStates(instance, 2, gorillaStates);
//
//        free(humanStates);
//        free(chimpStates);
//        free(gorillaStates);

    } else {
        // set the sequences for each tip using partial likelihood arrays
        double *humanPartials = getPartials(convertSequenceToVector(human, IS_CODON), nRepeats);
        double *chimpPartials = getPartials(convertSequenceToVector(chimp, IS_CODON), nRepeats);
        double *gorillaPartials = getPartials(convertSequenceToVector(gorilla, IS_CODON), nRepeats);

        beagleSetTipPartials(instance, 0, humanPartials);
        beagleSetTipPartials(instance, 1, chimpPartials);
        beagleSetTipPartials(instance, 2, gorillaPartials);

        free(humanPartials);
        free(chimpPartials);
        free(gorillaPartials);
    }

#ifdef _WIN32
    std::vector<double> rates(rateCategoryCount);
#else
    double rates[rateCategoryCount];
#endif
//    for (int i = 0; i < rateCategoryCount; i++) {
//        rates[i] = 1.0;
////        rates[i] = 3.0 * (i + 1) / (2 * rateCategoryCount + 1);
//    }

//    rates[0] = 0.14251623900062188;
//    rates[1] = 1.857483760999378;

    rates[0] = 1.0;

    beagleSetCategoryRates(instance, &rates[0]);

    double* patternWeights = (double*) malloc(sizeof(double) * nPatterns);

    for (int i = 0; i < nPatterns; i++) {
        patternWeights[i] = 1.0;
    }

    beagleSetPatternWeights(instance, patternWeights);

    // create base frequency array
    double freqs[STATE_SIZE];
    std::fill_n(freqs, STATE_SIZE, 0.05);
//    double freqs[4] = { 0.25, 0.25, 0.25, 0.25 };

    beagleSetStateFrequencies(instance, 0, freqs);

    // create an array containing site category weights
#ifdef _WIN32
    std::vector<double> weights(rateCategoryCount);
#else
    double weights[rateCategoryCount];
#endif
    for (int i = 0; i < rateCategoryCount; i++) {
        weights[i] = 1.0/rateCategoryCount;
//        weights[i] = 2.0 * double(i + 1)/ double(rateCategoryCount * (rateCategoryCount + 1));
    }

    beagleSetCategoryWeights(instance, 0, &weights[0]);

//#ifndef JC
//	// an eigen decomposition for the 4-state 1-step circulant infinitesimal generator
//	double evec[4 * 4] = {
//			 -0.5,  0.6906786606674509,   0.15153543380548623, 0.5,
//			  0.5, -0.15153543380548576,  0.6906786606674498,  0.5,
//			 -0.5, -0.6906786606674498,  -0.15153543380548617, 0.5,
//			  0.5,  0.15153543380548554, -0.6906786606674503,  0.5
//	};
//
//	double ivec[4 * 4] = {
//			 -0.5,  0.5, -0.5,  0.5,
//			  0.6906786606674505, -0.15153543380548617, -0.6906786606674507,   0.15153543380548645,
//			  0.15153543380548568, 0.6906786606674509,  -0.15153543380548584, -0.6906786606674509,
//			  0.5,  0.5,  0.5,  0.5
//	};
//
//	double eval[8] = { -2.0, -1.0, -1.0, 0, 0, 1, -1, 0 };
//#else
//	// an eigen decomposition for the JC69 model
//	double evec[4 * 4] = {
//        1.0,  2.0,  0.0,  0.5,
//        1.0,  -2.0,  0.5,  0.0,
//        1.0,  2.0, 0.0,  -0.5,
//        1.0,  -2.0,  -0.5,  0.0
//	};
//
//	double ivec[4 * 4] = {
//        0.25,  0.25,  0.25,  0.25,
//        0.125,  -0.125,  0.125,  -0.125,
//        0.0,  1.0,  0.0,  -1.0,
//        1.0,  0.0,  -1.0,  0.0
//	};
//
//	double eval[8] = { 0.0, -1.3333333333333333, -1.3333333333333333, -1.3333333333333333,
//			0.0, 0.0, 0.0, 0.0 };
//#endif
    //eigen decomposition
    double evec[STATE_SIZE * STATE_SIZE] = {
            -0.250000000000001,-0.242462642628142,0.632447106241306,0.069099339583876,-0.398005506146206,0.124312098279919,0.422116890104137,-0.179998292198014,0.161715366421763,0.0873309965233837,0.192143547940323,0.0702789642846214,0.00359604996876267,0.0924153406225726,-0.0617986004814974,0.0386579732146231,-0.25,0.0793862517250467,-0.089698388058406,-0.0421075817571859,0.1842309828244,0.357392080094346,-0.133524512950692,-0.14284940899697,-0.101079051155348,0.265801328772949,0.3677677761718,0.208391885324124,0.594446058812589,-0.234897459981346,-0.158827180268862,-0.167801751672415,-0.25,0.0328167020442523,0.00744672428251542,-0.0638597754281247,0.089138837324616,-0.0959185540244287,-0.129633734110458,0.100111709540303,0.00314275100191558,0.193563789094276,0.0553304276728349,-0.0413467947024205,0.139931403976442,0.130776470951805,0.112178520059847,0.892637129065996,-0.25,-0.0735862798646823,-0.145272306075899,0.0897292393674689,0.00731594249290463,-0.0601206046682904,-0.290560717146729,0.00503198787337983,-0.00414802263884114,0.108402904616348,0.169504483800483,0.334884648234523,-0.24060769557838,0.718855669287077,-0.24564753356206,-0.164847438800388,-0.25,-0.0964308262751065,-0.0074839343997588,0.0130099600332301,0.0726465959832142,0.000636407917411712,-0.037258946223183,-0.0656979760920863,-0.105139745030141,-0.057263514955274,0.11614130764289,0.06884843360431,0.00293513838436994,0.102791253665816,0.91478633070803,-0.192411972995186,-0.25,-0.192058975805687,0.0837590644786871,0.208750446106766,-0.125372676880936,-0.200744041280841,-0.2403776249864,-0.21764467542597,-0.0706877689754205,0.123101906592229,-0.74333025655691,0.167195423141582,0.275367612835774,-0.0824323918452349,-0.0307545846318906,-0.0681223076900746,-0.25,-0.171777861594157,-0.1540880759381,0.439500752683215,0.390015296951279,-0.369034912112251,0.449989816602169,0.232912770681581,-0.0189686746056392,0.273794707604391,0.0779815725582395,-0.192144572933089,-0.00976209644106574,-0.0757729705511848,-0.0867457091528915,-0.119853046521673,-0.25,-0.17845145939543,0.0942306128729535,0.149873284832216,0.133889542501131,0.146256675289637,-0.384919466726295,-0.205805597920835,0.19935529058961,-0.267666148398411,0.0875829853414249,-0.71276649017299,0.00609489134615992,0.0582212031328713,-0.100594427310332,-0.0619407729406196,-0.25,-0.0455794858822276,-0.0707842722657118,-0.0952870858506886,-0.163605551085456,0.19628535405234,-0.22200817391163,0.0377368219474847,-0.0465324705305636,0.499969355643656,-0.00414464213565233,-0.0516186577517304,-0.608400244214062,-0.423708515576142,0.00829257201499343,-0.0275904620454566,-0.25,0.054127046263265,-0.257351916407939,-0.0201862548718747,-0.133937437505033,0.612054419954261,0.324543684347034,0.342761727678222,-0.161114638532237,-0.0800439885341863,-0.354513815028166,-0.175085029116292,0.0609227477435125,0.245086115832117,-0.00863544645807118,0.00394693787899714,-0.25,0.0959366043071078,-0.32315909350014,-0.390418519555099,-0.386755152358198,-0.330586411962843,0.0511628868535456,0.141317786882826,0.544474368531035,0.0600825356223033,0.0344689138218916,-0.124619474106149,0.2147049051508,-0.0103347516847447,0.025551808087051,-0.162308963383173,-0.25,-0.0945969606346532,0.136527445853013,-0.696375857439913,0.279835310967942,-0.213367902438882,0.170175022726305,-0.169843828845662,-0.422178914065907,-0.0753901345406558,-0.0834594748266824,-0.118241988957293,-0.0699182995738296,0.0558791796719912,-0.152327419031706,-0.0851595881037315,-0.25,0.187109021310795,-0.33116262449496,0.250907309216599,-0.429638788864236,-0.1907106831749,0.090189115823214,-0.296133290786502,-0.428052560723869,-0.357796274894895,0.21732483257345,-0.00338228704046649,-0.0655239884680247,-0.162488798430237,-0.092657818694499,0.123724817759914,-0.25,-0.104898490419691,0.289124679140995,0.0079101956144076,-0.0338276139752808,-0.0978765147174337,-0.260257360502665,0.688751251681094,-0.101404258968593,-0.399159749493968,0.0947462511225173,0.199129421217113,0.0262789209670213,-0.246543978972335,-0.0836223668290332,-0.0574145634675259,-0.25,0.860056301781598,0.326925580560426,0.106537730119392,0.161756895654343,-0.0507613491866811,0.0153248231929916,-0.0294228238242123,0.102772281207366,0.0178626427279483,-0.12618266366587,-0.0257185550047608,-0.0984183520560474,0.0422435562628091,0.0140007972319581,-0.102949196742376,-0.25,-0.109588944932289,-0.191460602288983,-0.0270831826542848,0.352313322115517,0.172183937978634,0.175038296908654,-0.241228162194638,0.447846047474869,-0.392590356380095,-0.101361246432574,0.396195073978918,-0.231647052854023,-0.210089922385834,-0.053198941681037,0.15143320644309
    };
    double ivec[STATE_SIZE * STATE_SIZE] = {
            -0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.25,-0.242462642628141,0.079386251725046,0.0328167020442524,-0.073586279864683,-0.0964308262751067,-0.192058975805687,-0.171777861594157,-0.178451459395431,-0.0455794858822277,0.0541270462632655,0.0959366043071078,-0.0945969606346533,0.187109021310796,-0.104898490419691,0.860056301781598,-0.109588944932289,0.632447106241307,-0.0896983880584062,0.00744672428251547,-0.145272306075899,-0.00748393439975905,0.0837590644786872,-0.154088075938101,0.0942306128729532,-0.0707842722657118,-0.257351916407939,-0.32315909350014,0.136527445853012,-0.331162624494959,0.289124679140994,0.326925580560427,-0.191460602288983,0.0690993395838759,-0.0421075817571855,-0.0638597754281244,0.0897292393674688,0.01300996003323,0.208750446106766,0.439500752683215,0.149873284832216,-0.0952870858506885,-0.0201862548718751,-0.390418519555099,-0.696375857439913,0.250907309216598,0.00791019561440772,0.106537730119393,-0.0270831826542848,-0.398005506146205,0.184230982824398,0.0891388373246162,0.00731594249290425,0.0726465959832145,-0.125372676880934,0.390015296951282,0.13388954250113,-0.163605551085458,-0.133937437505035,-0.386755152358196,0.279835310967943,-0.429638788864234,-0.033827613975283,0.161756895654343,0.352313322115518,0.124312098279921,0.357392080094346,-0.0959185540244292,-0.0601206046682901,0.000636407917411853,-0.200744041280839,-0.369034912112253,0.146256675289637,0.196285354052341,0.61205441995426,-0.330586411962843,-0.213367902438882,-0.190710683174896,-0.0978765147174354,-0.0507613491866818,0.172183937978632,0.422116890104136,-0.133524512950692,-0.129633734110457,-0.290560717146729,-0.0372589462231826,-0.240377624986401,0.449989816602169,-0.384919466726295,-0.222008173911631,0.324543684347033,0.051162886853545,0.170175022726306,0.0901891158232132,-0.260257360502665,0.0153248231929925,0.175038296908654,-0.179998292198013,-0.142849408996972,0.100111709540303,0.0050319878733797,-0.065697976092087,-0.21764467542597,0.23291277068158,-0.205805597920834,0.0377368219474833,0.342761727678219,0.141317786882831,-0.169843828845664,-0.296133290786502,0.688751251681094,-0.0294228238242122,-0.241228162194636,0.161715366421761,-0.101079051155349,0.00314275100191592,-0.00414802263884128,-0.105139745030141,-0.070687768975422,-0.0189686746056372,0.19935529058961,-0.0465324705305646,-0.161114638532236,0.544474368531036,-0.422178914065907,-0.428052560723871,-0.101404258968589,0.102772281207366,0.447846047474869,0.0873309965233838,0.265801328772949,0.193563789094276,0.108402904616347,-0.0572635149552737,0.12310190659223,0.273794707604391,-0.26766614839841,0.499969355643656,-0.0800439885341865,0.0600825356223023,-0.0753901345406549,-0.357796274894894,-0.399159749493969,0.0178626427279482,-0.392590356380096,0.192143547940323,0.3677677761718,0.0553304276728348,0.169504483800483,0.11614130764289,-0.74333025655691,0.0779815725582395,0.0875829853414248,-0.00414464213565239,-0.354513815028166,0.034468913821892,-0.0834594748266827,0.21732483257345,0.0947462511225175,-0.126182663665871,-0.101361246432574,0.0702789642846214,0.208391885324124,-0.0413467947024207,0.334884648234523,0.0688484336043102,0.167195423141582,-0.192144572933089,-0.71276649017299,-0.0516186577517306,-0.175085029116292,-0.124619474106149,-0.118241988957293,-0.00338228704046609,0.199129421217113,-0.0257185550047611,0.396195073978918,0.00359604996876262,0.594446058812589,0.139931403976442,-0.24060769557838,0.00293513838436999,0.275367612835774,-0.00976209644106543,0.00609489134616006,-0.608400244214061,0.0609227477435125,0.2147049051508,-0.0699182995738297,-0.0655239884680248,0.0262789209670215,-0.0984183520560473,-0.231647052854023,0.0924153406225724,-0.234897459981346,0.130776470951805,0.718855669287077,0.102791253665816,-0.0824323918452346,-0.075772970551185,0.0582212031328714,-0.423708515576142,0.245086115832116,-0.010334751684745,0.0558791796719914,-0.162488798430237,-0.246543978972335,0.0422435562628089,-0.210089922385834,-0.0617986004814974,-0.158827180268862,0.112178520059847,-0.24564753356206,0.91478633070803,-0.0307545846318908,-0.0867457091528911,-0.100594427310332,0.00829257201499344,-0.00863544645807118,0.025551808087051,-0.152327419031706,-0.092657818694499,-0.0836223668290332,0.0140007972319582,-0.0531989416810367,0.0386579732146229,-0.167801751672415,0.892637129065996,-0.164847438800388,-0.192411972995186,-0.0681223076900749,-0.119853046521672,-0.0619407729406199,-0.0275904620454567,0.00394693787899718,-0.162308963383173,-0.0851595881037314,0.123724817759914,-0.0574145634675257,-0.102949196742375,0.15143320644309
    };

    ///array of real parts + array of imaginary parts
    double eval[STATE_SIZE] = {
            -1.06581410364015e-14,-4.47318348471924,-5.68869995730616,-5.89979185262537,-6.50821960160301,-6.60508756692181,-6.82429422313568,-7.26115752195747,-7.40853227123601,-7.90125184136468,-8.27343636864219,-8.83873621205474,-9.58595743957854,-10.0669368515274,-11.0031141060615,-11.3538119888281
    };

    ///Q^T matrix
    double Q[STATE_SIZE * STATE_SIZE] = {
            -5.89901762548834,0.194982040207833,0.207157449331135,0.0156871858052909,0.674989679362625,0.807041098363698,0.403965384466574,0.626676751766354,0.53029696107842,0.339301661355421,0.152487984858453,0.526118801673874,0.141418197192252,0.80484891217202,0.191143112257123,0.28290240559727,0.194982040207833,-8.09566121967509,0.9937439779751,0.81213018624112,0.862724364968017,0.0369221286382526,0.170624090125784,0.64561746106483,0.975732607766986,0.884930776199326,0.035088024334982,0.493327406002209,0.406050314893946,0.0546407853253186,0.756994087249041,0.772152968682349,0.207157449331135,0.9937439779751,-10.2107408756856,0.977085781516507,0.736116931773722,0.676678945310414,0.876439346699044,0.673989933682606,0.831993991043419,0.289516024757177,0.983126569306478,0.913669281871989,0.123278650688007,0.849502737633884,0.930127918720245,0.14831333537586,0.0156871858052909,0.81213018624112,0.977085781516507,-8.84382924926467,0.934994351351634,0.814023691928014,0.593427885789424,0.662993856705725,0.983791405102238,0.126225155545399,0.575697488617152,0.077805265551433,0.793885040329769,0.749514716677368,0.0538773911539465,0.672689846949652,0.674989679362625,0.862724364968017,0.736116931773722,0.934994351351634,-10.1139539692085,0.651314357761294,0.769376888172701,0.856125113321468,0.55990690854378,0.446420934982598,0.209149486385286,0.929841819219291,0.803798166336492,0.744097977643833,0.108583583729342,0.826513405656442,0.807041098363698,0.0369221286382526,0.676678945310414,0.814023691928014,0.651314357761294,-7.40236642234959,0.647851618006825,0.870688743656501,0.710094312205911,0.0850053902249783,0.201207815203816,0.29471311555244,0.653874792391434,0.543421939015388,0.0136260520666838,0.395902422023937,0.403965384466574,0.170624090125784,0.876439346699044,0.593427885789424,0.769376888172701,0.647851618006825,-6.34814585116692,0.308341189753264,0.0787766603752971,0.395572019508108,0.110956045333296,0.118532110471278,0.570221147732809,0.416765965521336,0.0493806877639145,0.837914811447263,0.626676751766354,0.64561746106483,0.673989933682606,0.662993856705725,0.856125113321468,0.870688743656501,0.308341189753264,-7.50586597877555,0.589558490784839,0.157721624244004,0.0174690247513354,0.14501806977205,0.238239917438477,0.725398944690824,0.0609419206157327,0.927084936527535,0.53029696107842,0.975732607766986,0.831993991043419,0.983791405102238,0.55990690854378,0.710094312205911,0.0787766603752971,0.589558490784839,-8.24650299269706,0.929064428433776,0.775130218127742,0.436429607449099,0.29717841069214,0.33459063549526,0.157695269677788,0.0562630859203637,0.339301661355421,0.884930776199326,0.289516024757177,0.126225155545399,0.446420934982598,0.0850053902249783,0.395572019508108,0.157721624244004,0.929064428433776,-6.75019344361499,0.497412796830758,0.205097107682377,0.753295891918242,0.478168275207281,0.351834069937468,0.810627286788076,0.152487984858453,0.035088024334982,0.983126569306478,0.575697488617152,0.209149486385286,0.201207815203816,0.110956045333296,0.0174690247513354,0.775130218127742,0.497412796830758,-6.51391671760939,0.708817657083273,0.86618359782733,0.308823636500165,0.396392825525254,0.67597354692407,0.526118801673874,0.493327406002209,0.913669281871989,0.077805265551433,0.929841819219291,0.29471311555244,0.118532110471278,0.14501806977205,0.436429607449099,0.205097107682377,0.708817657083273,-6.18706272961572,0.0173538792878389,0.518112531863153,0.179786366643384,0.622439709492028,0.141418197192252,0.406050314893946,0.123278650688007,0.793885040329769,0.803798166336492,0.653874792391434,0.570221147732809,0.238239917438477,0.29717841069214,0.753295891918242,0.86618359782733,0.0173538792878389,-6.62078823894262,0.0382656576111913,0.822698512114584,0.0950460624881089,0.80484891217202,0.0546407853253186,0.849502737633884,0.749514716677368,0.744097977643833,0.543421939015388,0.416765965521336,0.725398944690824,0.33459063549526,0.478168275207281,0.308823636500165,0.518112531863153,0.0382656576111913,-6.9953404054977,0.391177944373339,0.0380097457673401,0.191143112257123,0.756994087249041,0.930127918720245,0.0538773911539465,0.108583583729342,0.0136260520666838,0.0493806877639145,0.0609419206157327,0.157695269677788,0.351834069937468,0.396392825525254,0.179786366643384,0.822698512114584,0.391177944373339,-4.6306258700788,0.166366128250957,0.28290240559727,0.772152968682349,0.14831333537586,0.672689846949652,0.826513405656442,0.395902422023937,0.837914811447263,0.927084936527535,0.0562630859203637,0.810627286788076,0.67597354692407,0.622439709492028,0.0950460624881089,0.0380097457673401,0.166366128250957,-7.32819969789125
    };
//    ///eigen decomposition of the HKY85 model
//    double evec[20 * 20] = {
//            -0.22360679774998, 0.0651018569458695, 0.322212782236106, 0.0106709759481933, 0.131758414351269, -0.351722878796552, 0.399398317493782, 0.371319661728192, -0.25277526646663, 0.235560058369583, 0.331069363419672, -0.267813948526498, -0.105139751351132, -0.041020994691439, 0.202775968654526, -0.128442370589652, 0.073566520438909, 0.0355261541028082, 0.160051851890088, 0.00132626651512435, -0.223606797749978, -0.0387952852996174, -0.0307695014482887, 0.16989203630798, 0.22362809314772, -0.105359978088486, 0.0348173424526401, -0.114900511261676, -0.223447844077681, -0.249916081301916, -0.0120063512718638, 0.572589735567752, -0.353381432722043, -0.0382970783995235, 0.272042742673459, -0.132010275971186, -0.315044643518323, -0.246692362739189, 0.0216353930916151, 0.156245581744495, -0.223606797749979, 0.0412888860338009, -0.0890320575477397, -0.0175161896926096, 0.124498446916458, -0.0182468620359166, -0.0194037344747199, -0.135244114823417, -0.482801763728705, 0.420737242759368, 0.0343332850526099, 0.121922543404504, 0.117952303804824, 0.194689768988208, -0.467490042776969, 0.301592795112984, -0.296511658501376, 0.121915588687692, -0.106488470818642, -0.0628950737737374, -0.223606797749979, -0.0199572885263733, -0.474768373778896, -0.530325114634042, -0.327868451213174, 0.0987400549954746, 0.439386287159574, -0.055029469329027, -0.121967446539741, 0.0548963613135759, -0.118898909875142, 0.0800122511824841, 0.0248861321741758, -0.222790224277768, 0.190213564984487, -0.00997459706340748, 0.056918027525722, 0.01337855518797, -0.0072117594390976, -0.0343710038146146, -0.223606797749979, 0.3644587120895, 0.416895120277944, -0.632643713268392, 0.337661962665953, 0.0405370284979227, -0.152554816856872, -0.109937744688371, 0.226224868776149, -0.0599123180792189, -0.0295305383872364, 0.136774372588062, 0.0609087864888067, 0.0111136166446794, 0.0278769782025939, 0.0836016574730905, 0.0212517389599398, 0.0510720300216766, -0.0223770720123762, 0.0510408636279435, -0.223606797749979, -0.0331496582642124, -0.125916683045246, 0.0369387472737378, -0.123466091284821, -0.0464063045836513, -0.0514222270892775, 0.125524870170778, 0.283292247802108, -0.0334009733386393, 0.0546062269512025, -0.051613682094835, -0.576448172512241, 0.249341712763148, 0.0975657300736464, 0.578528392926005, 0.0425958345221828, 0.256362609047682, 0.0358476552754373, -0.0369907911704236, -0.223606797749979, -0.108763312131609, -0.0724327729495555, 0.123097421330266, 0.142159797732633, 0.0458415501045905, -0.0244952664647034, -0.538922839758476, -0.145239890554305, -0.225002508682283, 0.13076530279826, -0.293780502902713, 0.282162102974622, 0.204798813125797, 0.379779286156276, 0.0157436031394477, 0.012698520100647, 0.35231988027173, 0.189101216707051, 0.0566309281419031, -0.223606797749979, 0.0920032346890431, -0.115921893365138, 0.128674202887567, 0.185300740054359, -0.150876456278441, -0.240566894163322, 0.34088235637321, -0.311344726851846, -0.239729192698809, -0.504682924494107, -0.0579782945268387, 0.163730818966488, -0.275631361264558, 0.0220908246069552, 0.216712184528737, 0.325426705009713, 0.0872153363532547, 0.0217744843674169, 0.0606583815399972, -0.223606797749979, 0.0398528441417174, -0.118992640808454, -0.00135408503023128, -0.0700578148090294, -0.199739460355831, 0.0195385023814268, 0.103956521200103, 0.0918024520896499, -0.0516988380347112, -0.0284047323617921, -0.129377694298715, 0.249047666662444, 0.53616820673154, 0.139060118409618, 0.0145004655858888, 0.0638778540943619, -0.45905857089041, -0.489158967456397, 0.162700392782244, -0.223606797749979, -0.0617753558620916, -0.0371851649104241, 0.226333151772875, 0.174184580609749, -0.317719195788612, 0.46108627407949, -0.170131719278927, 0.433331302637906, -0.165349441073865, -0.0308422631385028, 0.140326943601814, 0.138310889028523, -0.176266847004696, -0.402507281119748, -0.0323628116241694, 0.0872514114064526, 0.200579723747571, -0.153758177640579, 0.0154251128960615, -0.223606797749979, 0.213477037627461, 0.48916156500945, 0.186210592896614, -0.697155732236195, 0.000806674841588299, 0.0166370015733826, -0.207696100796733, -0.14474685729615, -0.0443003913376476, -0.151954128729521, 0.145177542998443, -0.00968207041617701, 0.0123863897532555, -0.0538398030954437, -0.0246595529490158, 0.136658576831905, 0.0654687503335997, -0.0193455128197372, 0.082838382107049, -0.223606797749979, -0.00898355389506619, 0.0288776976292676, 0.0671259295953931, 0.0412109799907597, -0.0447302221755479, -0.0293694310501104, -0.0872036562108164, 0.0788570043622586, 0.0391240567835105, -0.190085715967546, 0.019557095022292, 0.00162103010197897, 0.127126083333488, 0.0386626579033128, -0.102345718865725, 0.0581170279712902, -0.247824908101147, 0.202924206741676, -0.868356495345029, -0.223606797749979, 0.0662140230974244, -0.190568484012626, -0.00921411036863305, 0.0128885747751194, -0.0329050495931789, -0.229021248280853, 0.0908435645883825, 0.118402529051798, 0.272959628535284, -0.272426038120379, -0.0412740050488376, -0.222330319808218, 0.227950837058524, -0.0535391216487669, -0.649425471729214, -0.0213761186704434, 0.373695560559996, -0.012676559937145, 0.128601959702126, -0.223606797749979, -0.0309449959656993, -0.0982068912324933, -0.0185077470098253, -0.0298968344709594, 0.0215962083184437, -0.0220583117192116, -0.0649569243096664, 0.141143000739828, 0.050006593634711, -0.045192665500223, -0.136037475692026, 0.0154590583927705, 0.0700459865337701, -0.29676225476674, 0.0277143950133081, 0.0384190139976761, -0.429155231055345, 0.693048997441227, 0.360652213380722, -0.223606797749979, -0.00882148599863244, -0.152833639139141, -0.00681398114702986, 0.0471878071333678, 0.147585883922088, -0.254557033476661, -0.133089700670482, -0.148094442430915, -0.0577341768802071, 0.528402310901902, 0.0511813489040088, -0.199281268252264, -0.145413379576491, -0.211574445850123, -0.149066690291494, 0.578004967485832, -0.11926491551886, -0.186054271066722, -0.0461596217325158, -0.223606797749979, 0.0728763203201038, -0.132995987435557, 0.113130629142286, -0.183034634137828, -0.284827424317459, -0.406438250327592, -0.0133093557376073, 0.280169468034778, 0.32608715089843, 0.235903157670178, 0.0457514535362156, 0.250346845237441, -0.439618625768271, 0.244736053317918, 0.0855379034505596, -0.257548564982547, -0.0401131137531491, -0.0231619576398581, -0.00253681532924153, -0.223606797749979, -0.863059451314697, 0.322808808719158, -0.169459032163627, -0.004811338926758, 0.0838564100726594, -0.106631861435628, 0.0514766318026688, 0.0268606346265139, 0.102809139198778, -0.122911626595043, 0.00539026229619458, 0.0210245565094824, -0.081494462557006, 0.00336339645245384, 0.00634835867313073, 0.00978875062636561, -0.0123808463135663, -0.119095170162786, 0.0559996001536113, -0.223606797749979, 0.136092780248431, 0.054529974844261, 0.349719174900592, 0.190972734952973, 0.695625476651452, 0.222779685165944, 0.124406778418822, 0.167696581147773, 0.319441307519854, -0.0645385853990403, 0.0792441462293083, 0.10635464182055, -0.06542022999884, 0.197668934520479, 0.0752145266162264, 0.0782318219919233, -0.0470512289690168, -0.0762543985590546, 0.0751574173328087, -0.223606797749979, 0.109686193063351, 0.0456115920943136, 0.0106923756793017, -0.00322490951807621, 0.187994928361187, 0.00109609375020931, -0.0762999179729506, -0.0403371162686708, -0.260090647148073, -0.065496800519651, -0.591318373102534, -0.266896904316305, -0.298710173316025, -0.175498997770944, -0.0758829424608452, -0.42944655357516, -0.155635049683626, -0.252499480084065, -0.0442142849520794, -0.223606797749979, -0.0268015009987032, -0.0404734511369432, -0.0366512644204159, -0.17193632573352, 0.22994961624827, -0.0582204287174994, 0.498311670555991, 0.0229752649458824, -0.434486970437726, 0.321891633566224, 0.17126628086192, 0.301355087216276, 0.15104196192221, -0.15462430892699, -0.101323850974667, -0.262879231715073, 0.199642038710329, 0.143697992121947, -0.111753013806444
//    };
//    double ivec[20 * 20] = {
//            -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, -0.223606797749979, 0.065101856945869, -0.0387952852996173, 0.0412888860338008, -0.019957288526373, 0.364458712089499, -0.0331496582642123, -0.108763312131609, 0.0920032346890434, 0.0398528441417176, -0.0617753558620915, 0.213477037627461, -0.00898355389506615, 0.0662140230974245, -0.0309449959656991, -0.00882148599863254, 0.0728763203201038, -0.863059451314697, 0.13609278024843, 0.109686193063351, -0.0268015009987033, 0.322212782236107, -0.0307695014482886, -0.0890320575477401, -0.474768373778896, 0.416895120277944, -0.125916683045246, -0.072432772949555, -0.115921893365139, -0.118992640808454, -0.0371851649104236, 0.48916156500945, 0.0288776976292679, -0.190568484012626, -0.0982068912324931, -0.152833639139141, -0.132995987435557, 0.322808808719159, 0.0545299748442609, 0.0456115920943137, -0.0404734511369433, 0.0106709759481936, 0.16989203630798, -0.0175161896926095, -0.530325114634042, -0.632643713268392, 0.0369387472737379, 0.123097421330266, 0.128674202887567, -0.0013540850302315, 0.226333151772875, 0.186210592896614, 0.067125929595393, -0.00921411036863311, -0.0185077470098255, -0.00681398114702954, 0.113130629142287, -0.169459032163627, 0.349719174900592, 0.0106923756793019, -0.0366512644204158, 0.131758414351269, 0.22362809314772, 0.124498446916459, -0.327868451213174, 0.337661962665952, -0.123466091284821, 0.142159797732633, 0.185300740054359, -0.0700578148090292, 0.17418458060975, -0.697155732236195, 0.0412109799907598, 0.0128885747751192, -0.0298968344709591, 0.0471878071333678, -0.183034634137829, -0.00481133892675805, 0.190972734952973, -0.00322490951807628, -0.171936325733521, -0.351722878796552, -0.105359978088487, -0.0182468620359175, 0.0987400549954748, 0.0405370284979223, -0.0464063045836509, 0.0458415501045896, -0.150876456278441, -0.199739460355831, -0.317719195788612, 0.000806674841588508, -0.0447302221755477, -0.0329050495931789, 0.0215962083184438, 0.147585883922088, -0.284827424317459, 0.0838564100726598, 0.695625476651452, 0.187994928361188, 0.229949616248271, 0.39939831749378, 0.0348173424526403, -0.0194037344747199, 0.439386287159574, -0.152554816856871, -0.0514222270892777, -0.024495266464702, -0.240566894163322, 0.0195385023814267, 0.461086274079491, 0.0166370015733829, -0.02936943105011, -0.229021248280853, -0.0220583117192114, -0.254557033476661, -0.406438250327592, -0.106631861435628, 0.222779685165943, 0.00109609375020967, -0.0582204287175008, 0.371319661728191, -0.114900511261676, -0.135244114823414, -0.055029469329027, -0.109937744688372, 0.125524870170777, -0.538922839758475, 0.340882356373211, 0.103956521200102, -0.170131719278931, -0.207696100796732, -0.087203656210817, 0.0908435645883829, -0.0649569243096668, -0.13308970067048, -0.0133093557376072, 0.051476631802669, 0.124406778418822, -0.0762999179729501, 0.498311670555991, -0.252775266466632, -0.22344784407768, -0.482801763728706, -0.121967446539741, 0.22622486877615, 0.283292247802107, -0.145239890554302, -0.311344726851846, 0.0918024520896497, 0.433331302637907, -0.144746857296149, 0.0788570043622591, 0.118402529051797, 0.141143000739828, -0.148094442430915, 0.280169468034777, 0.0268606346265135, 0.167696581147772, -0.0403371162686694, 0.0229752649458815, 0.235560058369584, -0.249916081301916, 0.420737242759369, 0.0548963613135756, -0.0599123180792201, -0.0334009733386401, -0.225002508682282, -0.239729192698808, -0.0516988380347106, -0.165349441073868, -0.0443003913376477, 0.03912405678351, 0.272959628535284, 0.0500065936347107, -0.0577341768802067, 0.32608715089843, 0.102809139198778, 0.319441307519853, -0.260090647148072, -0.434486970437725, 0.331069363419672, -0.0120063512718628, 0.0343332850526105, -0.118898909875142, -0.0295305383872369, 0.0546062269512017, 0.130765302798259, -0.504682924494106, -0.0284047323617916, -0.0308422631385034, -0.151954128729521, -0.190085715967546, -0.27242603812038, -0.0451926655002239, 0.528402310901902, 0.235903157670179, -0.122911626595043, -0.0645385853990398, -0.0654968005196532, 0.321891633566225, -0.267813948526498, 0.57258973556775, 0.121922543404504, 0.0800122511824844, 0.136774372588062, -0.0516136820948381, -0.293780502902711, -0.0579782945268385, -0.129377694298713, 0.140326943601815, 0.145177542998443, 0.0195570950222919, -0.04127400504884, -0.136037475692027, 0.051181348904009, 0.0457514535362176, 0.00539026229619448, 0.0792441462293081, -0.591318373102536, 0.171266280861922, -0.105139751351133, -0.35338143272204, 0.117952303804824, 0.0248861321741772, 0.0609087864888075, -0.576448172512242, 0.282162102974619, 0.163730818966488, 0.249047666662442, 0.138310889028524, -0.00968207041617654, 0.00162103010197855, -0.222330319808219, 0.0154590583927693, -0.199281268252263, 0.250346845237443, 0.0210245565094825, 0.10635464182055, -0.266896904316308, 0.301355087216276, -0.0410209946914383, -0.0382970783995226, 0.194689768988208, -0.222790224277768, 0.0111136166446794, 0.24934171276315, 0.204798813125796, -0.27563136126456, 0.536168206731539, -0.176266847004697, 0.0123863897532553, 0.127126083333488, 0.227950837058525, 0.0700459865337701, -0.14541337957649, -0.439618625768272, -0.081494462557006, -0.0654202299988405, -0.298710173316024, 0.151041961922208, 0.202775968654526, 0.272042742673459, -0.467490042776968, 0.190213564984487, 0.027876978202594, 0.0975657300736464, 0.379779286156276, 0.0220908246069548, 0.139060118409618, -0.402507281119747, -0.0538398030954435, 0.0386626579033126, -0.0535391216487673, -0.29676225476674, -0.211574445850123, 0.244736053317918, 0.00336339645245369, 0.197668934520478, -0.175498997770944, -0.154624308926989, -0.128442370589652, -0.132010275971185, 0.301592795112984, -0.00997459706340718, 0.0836016574730904, 0.578528392926005, 0.0157436031394478, 0.216712184528737, 0.0145004655858888, -0.0323628116241694, -0.0246595529490158, -0.102345718865726, -0.649425471729215, 0.0277143950133079, -0.149066690291495, 0.0855379034505598, 0.00634835867313056, 0.0752145266162265, -0.0758829424608451, -0.101323850974667, 0.0735665204389089, -0.315044643518323, -0.296511658501376, 0.056918027525722, 0.0212517389599398, 0.0425958345221822, 0.0126985201006467, 0.325426705009713, 0.0638778540943618, 0.0872514114064529, 0.136658576831906, 0.0581170279712899, -0.021376118670443, 0.0384190139976762, 0.578004967485833, -0.257548564982547, 0.00978875062636565, 0.0782318219919233, -0.42944655357516, -0.262879231715073, 0.0355261541028085, -0.24669236273919, 0.121915588687692, 0.0133785551879699, 0.0510720300216763, 0.256362609047682, 0.35231988027173, 0.0872153363532546, -0.45905857089041, 0.200579723747571, 0.0654687503335999, -0.247824908101147, 0.373695560559996, -0.429155231055345, -0.11926491551886, -0.0401131137531491, -0.0123808463135663, -0.047051228969017, -0.155635049683627, 0.199642038710329, 0.160051851890088, 0.0216353930916153, -0.106488470818642, -0.00721175943909785, -0.0223770720123759, 0.0358476552754372, 0.189101216707051, 0.0217744843674169, -0.489158967456397, -0.153758177640579, -0.0193455128197371, 0.202924206741676, -0.012676559937145, 0.693048997441227, -0.186054271066722, -0.023161957639858, -0.119095170162786, -0.0762543985590547, -0.252499480084065, 0.143697992121947, 0.00132626651512443, 0.156245581744495, -0.0628950737737373, -0.0343710038146147, 0.0510408636279437, -0.0369907911704233, 0.056630928141903, 0.0606583815399975, 0.162700392782244, 0.0154251128960614, 0.0828383821070491, -0.868356495345029, 0.128601959702127, 0.360652213380722, -0.0461596217325158, -0.00253681532924152, 0.0559996001536114, 0.0751574173328085, -0.0442142849520796, -0.111753013806444
//    };
//
//    ///array of real parts + array of imaginary parts
//    double eval[20] = {
//            -1.33226762955019e-15, -0.669469017319181, -0.715290880034536, -0.788508594926157, -0.821953309079945, -0.879968381133236, -0.899017731489692, -0.972480837994005, -0.995193914611581, -1.01519354822142, -1.06226704367394, -1.09709454309371, -1.1066273819981, -1.12500436824305, -1.15317405645815, -1.23539722389947, -1.28136791384214, -1.35918835894837, -1.39035615127168, -1.43244674376164
//    };

    ///Q^T matrix
//    double QT[4 * 4] = {
//            -1.2857138,  0.1428570,  0.1428570,  0.1428570,
//            0.4285712, -0.9999997,  0.4285714,  0.4285713,
//            0.2857142,  0.2857143, -1.1428568,  0.2857142,
//            0.5714284,  0.5714284,  0.5714284, -0.8571426
//    };
//
//    double Q[20 * 20] = {
//            -0.919045525346461, 0.0645816451351422, 0.0829817398906486, 0.00665059125210115, 0.100376799265544, 0.0363039205636958, 0.00313200707131766, 0.0533097938858484, 0.0825368820574103, 0.101880222214165, 0.0876686291933527, 0.0437322656659771, 0.00782278898823527, 0.00592268395155193, 0.0101412803336771, 0.0284729782689749, 0.0627744267528694, 0.0468263187597422, 0.0600835204865093, 0.0338470316096972, 0.0645816451351422, -1.05442044485183, 0.0744285324180094, 0.0188271428955646, 0.0305236023586574, 0.0725015366625808, 0.102079939284768, 0.107047780351141, 0.021566382909701, 0.109343201920769, 0.0280702183165341, 0.0895172197200487, 0.0507260799342887, 0.00612605687809472, 0.0895723974289213, 0.0215640793967486, 0.0477824655348121, 0.0522443808017759, 0.0249285310973717, 0.0429892518068967, 0.0829817398906486, 0.0744285324180094, -1.04418209484121, 0.0771917775802503, 0.0481751535777656, 0.00955884673293055, 0.0725501966026011, 0.0781092480801669, 0.0560049296628187, 0.0205531738485172, 0.0320335476525439, 0.0574703565929401, 0.0796314112075799, 0.0882698866669537, 0.100406344019456, 0.0458190848651252, 0.0293136072255216, 0.0642892395145181, 0.0217312511377972, 0.00566376756506773, 0.00665059125210115, 0.0188271428955646, 0.0771917775802503, -0.801143061332716, 0.0346453197477224, 0.072575162642316, 0.0356031990183295, 0.0110179241355545, 0.0816672762100033, 0.0392068812121782, 0.00176954144577084, 0.0229758735581654, 0.0703167573251059, 0.0866531675027245, 0.0554318149318395, 0.0294352886450659, 0.0244686940177938, 3.05646993494772e-05, 0.052423642572906, 0.0802524419399747, 0.100376799265544, 0.0305236023586574, 0.0481751535777656, 0.0346453197477224, -0.755026185649853, 0.0077136889555739, 0.0162010679582394, 0.0327394363560894, 0.0337115195200703, 0.00441678356042665, 0.0616656926187951, 0.0726522671355213, 0.0453420260192409, 0.0441187554357632, 0.0431247370068649, 0.0205818867036137, 0.00618099395037764, 0.0315806867329324, 0.0841673772591752, 0.0371083914874793, 0.0363039205636958, 0.0725015366625808, 0.00955884673293055, 0.072575162642316, 0.0077136889555739, -1.08989436909541, 0.0162116440229713, 0.0317728530581028, 0.101772260105319, 0.0573516794980774, 0.0442322107657553, 0.0645444524969062, 0.0950074160380028, 0.0883876956653839, 0.074419831855259, 0.083349595902638, 0.0539666128147778, 0.0425364371168138, 0.0712400837721507, 0.0664484404261573, 0.00313200707131766, 0.102079939284768, 0.0725501966026011, 0.0356031990183295, 0.0162010679582394, 0.0162116440229713, -1.0354604621816, 0.038435333521075, 0.103450127904696, 0.0754726298110981, 0.0216351456619664, 0.0880902146475408, 0.00951189245049962, 0.0586792088380161, 0.105435530920425, 0.0453112309220564, 0.0814713490299468, 0.0592741466988649, 0.0974004310123816, 0.00551516680480496, 0.0533097938858484, 0.107047780351141, 0.0781092480801669, 0.0110179241355545, 0.0327394363560894, 0.0317728530581028, 0.038435333521075, -0.996371672955653, 0.0762994427834526, 0.0339361247279442, 0.00160785964222727, 0.07976433255616, 0.0895440532724139, 0.0444394129089702, 0.0357072898437009, 0.0773847587913557, 0.00191159746995631, 0.0350151148143674, 0.0879298176784284, 0.080399499078697, 0.0825368820574103, 0.021566382909701, 0.0560049296628187, 0.0816672762100033, 0.0337115195200703, 0.101772260105319, 0.103450127904696, 0.0762994427834526, -1.16837332728125, 0.0759038082285838, 0.0452327398532596, 0.0980089019213313, 0.101550034037563, 0.0874911981684357, 0.00924124371810512, 0.0761591239604946, 0.00158509022907143, 0.000867517684423019, 0.00550592875914636, 0.109818919567361, 0.101880222214165, 0.109343201920769, 0.0205531738485172, 0.0392068812121782, 0.00441678356042665, 0.0573516794980774, 0.0754726298110981, 0.0339361247279442, 0.0759038082285838, -0.956121731696535, 0.0139116261574472, 0.0935278122334434, 0.0137978071448215, 0.102895334390942, 0.00504001086766964, 0.0530927193078738, 0.0388249603832322, 0.0586578497098913, 0.0409731263219166, 0.0173359801575379, 0.0876686291933527, 0.0280702183165341, 0.0320335476525439, 0.00176954144577084, 0.0616656926187951, 0.0442322107657553, 0.0216351456619664, 0.00160785964222727, 0.0452327398532596, 0.0139116261574472, -0.785665635587329, 0.0850204418037728, 0.00590536026309691, 0.0374327573290271, 0.00489402029174527, 0.0789884219662264, 0.0235507339709567, 0.0524742128680423, 0.0910867504808284, 0.0684857253059803, 0.0437322656659771, 0.0895172197200487, 0.0574703565929401, 0.0229758735581654, 0.0726522671355213, 0.0645444524969062, 0.0880902146475408, 0.07976433255616, 0.0980089019213313, 0.0935278122334434, 0.0850204418037728, -1.32010785252676, 0.109572790583914, 0.0916674739251388, 0.0327791724716259, 0.0634146007762372, 0.0816272523492635, 0.0811338719718185, 0.0504054285112548, 0.0142031236057051, 0.00782278898823527, 0.0507260799342887, 0.0796314112075799, 0.0703167573251059, 0.0453420260192409, 0.0950074160380028, 0.00951189245049962, 0.0895440532724139, 0.101550034037563, 0.0137978071448215, 0.00590536026309691, 0.109572790583914, -1.10734944947211, 0.0948234739925037, 0.0685432928332674, 0.109060769855534, 0.0155407847104771, 0.0599150638593187, 0.0551757535807202, 0.0255618933755226, 0.00592268395155193, 0.00612605687809472, 0.0882698866669537, 0.0866531675027245, 0.0441187554357632, 0.0883876956653839, 0.0586792088380161, 0.0444394129089702, 0.0874911981684357, 0.102895334390942, 0.0374327573290271, 0.0916674739251388, 0.0948234739925037, -1.27297191628273, 0.0832907182801539, 0.0721718701453563, 0.0727807320661407, 0.0562200140440755, 0.0918053396872736, 0.0597961364062205, 0.0101412803336771, 0.0895723974289213, 0.100406344019456, 0.0554318149318395, 0.0431247370068649, 0.074419831855259, 0.105435530920425, 0.0357072898437009, 0.00924124371810512, 0.00504001086766964, 0.00489402029174527, 0.0327791724716259, 0.0685432928332674, 0.0832907182801539, -1.08336776197429, 0.0981179442963592, 0.0364432856570005, 0.0477015554826632, 0.0806310028285033, 0.102446288907052, 0.0284729782689749, 0.0215640793967486, 0.0458190848651252, 0.0294352886450659, 0.0205818867036137, 0.083349595902638, 0.0453112309220564, 0.0773847587913557, 0.0761591239604946, 0.0530927193078738, 0.0789884219662264, 0.0634146007762372, 0.109060769855534, 0.0721718701453563, 0.0981179442963592, -0.974211717817787, 0.0101108616658585, 0.00865060967640402, 0.0127767066927698, 0.0397491859790944, 0.0627744267528694, 0.0477824655348121, 0.0293136072255216, 0.0244686940177938, 0.00618099395037764, 0.0539666128147778, 0.0814713490299468, 0.00191159746995631, 0.00158509022907143, 0.0388249603832322, 0.0235507339709567, 0.0816272523492635, 0.0155407847104771, 0.0727807320661407, 0.0364432856570005, 0.0101108616658585, -0.674950038465728, 0.000348998165085386, 0.0120852042927347, 0.074182388179852, 0.0468263187597422, 0.0522443808017759, 0.0642892395145181, 3.05646993494772e-05, 0.0315806867329324, 0.0425364371168138, 0.0592741466988649, 0.0350151148143674, 0.000867517684423019, 0.0586578497098913, 0.0524742128680423, 0.0811338719718185, 0.0599150638593187, 0.0562200140440755, 0.0477015554826632, 0.00865060967640402, 0.000348998165085386, -0.865723366225217, 0.0852849569791687, 0.082671826645962, 0.0600835204865093, 0.0249285310973717, 0.0217312511377972, 0.052423642572906, 0.0841673772591752, 0.0712400837721507, 0.0974004310123816, 0.0879298176784284, 0.00550592875914636, 0.0409731263219166, 0.0910867504808284, 0.0504054285112548, 0.0551757535807202, 0.0918053396872736, 0.0806310028285033, 0.0127767066927698, 0.0120852042927347, 0.0852849569791687, -1.08738639035876, 0.0617515372077201, 0.0338470316096972, 0.0429892518068967, 0.00566376756506773, 0.0802524419399747, 0.0371083914874793, 0.0664484404261573, 0.00551516680480496, 0.080399499078697, 0.109818919567361, 0.0173359801575379, 0.0684857253059803, 0.0142031236057051, 0.0255618933755226, 0.0597961364062205, 0.102446288907052, 0.0397491859790944, 0.074182388179852, 0.082671826645962, 0.0617515372077201, -1.00822699605678
//    };

//    double Q2[4 * 4 * 2] = {
//            1.8367333, -0.6122443, -0.4081629, -0.8163261,
//            -0.2040814,  1.4285705, -0.4081632, -0.8163259,
//            -0.2040814, -0.6122447,  1.6326522, -0.8163261,
//            -0.2040814, -0.6122446, -0.4081630,  1.2244890,
//            1.8367333, -0.6122443, -0.4081629, -0.8163261,
//            -0.2040814,  1.4285705, -0.4081632, -0.8163259,
//            -0.2040814, -0.6122447,  1.6326522, -0.8163261,
//            -0.2040814, -0.6122446, -0.4081630,  1.2244890
//    };

    std::vector<double> scaledQ(STATE_SIZE * STATE_SIZE);
    std::vector<double> scaledQ2(STATE_SIZE * STATE_SIZE);
//    std::vector<double> scaledQT(4 * 4 * 2);

    for (int rate = 0; rate < rateCategoryCount; ++rate) {
        for (int entry = 0; entry < stateCount * stateCount; ++entry) {
            scaledQ[entry + rate * stateCount * stateCount] = Q[entry + rate * stateCount * stateCount] * rates[rate];
            scaledQ2[entry + rate * stateCount * stateCount] = Q[entry + rate * stateCount * stateCount] * rates[rate] * rates[rate];
        }
    }

    // set the Eigen decomposition
    beagleSetEigenDecomposition(instance, 0, evec, ivec, eval);

    // a list of indices and edge lengths
    int nodeIndices[4] = { 0, 1, 2, 3 };
//    double edgeLengths[4] = { 0.6, 0.6, 1.3, 0.7};
    double edgeLengths[4] = { 1.0, 1.0, 1.0, 1.0};

    // tell BEAGLE to populate the transition matrices for the above edge lengths
    beagleUpdateTransitionMatrices(instance,     // instance
                                   0,             // eigenIndex
                                   nodeIndices,   // probabilityIndices
                                   NULL,          // firstDerivativeIndices
                                   NULL,          // secondDervativeIndices
                                   edgeLengths,   // edgeLengths
                                   4);            // count

    beagleSetTransitionMatrix(instance, 4, scaledQ.data(), 0.0);
    beagleSetTransitionMatrix(instance, 5, scaledQ2.data(), 0.0);

    int originalIndices[6]  = { 0, 1, 2, 3, 4, 5 };
    int transposeIndices[6] = { 6, 7, 8, 9, 10, 11 };

    beagleTransposeTransitionMatrices(instance, originalIndices, transposeIndices, 6);

    double* matrix1 = (double*) malloc(sizeof(double) * stateCount * stateCount * rateCategoryCount);
    double* matrix2 = (double*) malloc(sizeof(double) * stateCount * stateCount * rateCategoryCount);

    beagleGetTransitionMatrix(instance, 0, matrix1);
    beagleGetTransitionMatrix(instance, 6, matrix2);

    int nodeId = 0;
    std::cout << "Matrix for node " << nodeId << std::endl;
    double* mat = matrix1;
    {
        int offset = 0;
        for (int r = 0; r < rateCategoryCount; r++) {
            std::cout << "  rate category" << r + 1 << ": \n";
            for (int i = 0; i < stateCount; i++) {
                for (int j = 0; j < stateCount; j++) {
                    std::cout << mat[offset++] << ", ";
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }
    }

    std::cout << "Matrix-transpose for node " << nodeId << std::endl;
    mat = matrix2;
    {
        int offset = 0;
        for (int r = 0; r < rateCategoryCount; r++) {
            std::cout << "  rate category" << r + 1 << ": \n";
            for (int i = 0; i < stateCount; i++) {
                for (int j = 0; j < stateCount; j++) {
                    std::cout << mat[offset++] << ", ";
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }
    }

    // create a list of partial likelihood update operations
    // the order is [dest, destScaling, source1, matrix1, source2, matrix2]
    BeagleOperation operations[2] = {
            3, (scaling ? 0 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 0, 0, 1, 1,
            4, (scaling ? 1 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 2, 2, 3, 3
    };

    int rootIndex = 4;

    // update the partials
    beagleUpdatePartials(instance,      // instance
                         operations,     // eigenIndex
                         2,              // operationCount
                         BEAGLE_OP_NONE);          // cumulative scaling index

    ///XJ: I decided to store the pre-order partials vector in reverse order as those of post-orders
    ///This means that the two indices to the partials of root nodes are adjacent.
    ///For any node, the indices of the two partials sum to 2*(partialsBufferCount + compactBufferCount) - 1


    int categoryWeightsIndex = 0;
    int stateFrequencyIndex = 0;
    int transpose = (stateCount == 4 || !useGpu) ? 0 : 6;
    // create a list of partial likelihood update operations
    // the order is [dest, destScaling, source1, matrix1, source2, matrix2]
    // destPartials point to the pre-order partials
    // partials1 = pre-order partials of the parent node
    // matrices1 = Ptr matrices of the current node (to the parent node)
    // partials2 = post-order partials of the sibling node
    // matrices2 = Ptr matrices of the sibling node (to the parent node)
    BeagleOperation pre_order_operations[4] = {
            6, (scaling ? 3 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 5, 3 + transpose, 2, 2,
            7, (scaling ? 4 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 5, 2 + transpose, 3, 3,
            8, (scaling ? 5 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 6, 1 + transpose, 0, 0,
            9, (scaling ? 6 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 6, 0 + transpose, 1, 1,
    };

    int rootPreIndex = 5;

    double *patternLogLik = (double*)malloc(sizeof(double) * nPatterns);

    int cumulativeScalingIndex = (scaling ? 2 : BEAGLE_OP_NONE);

    if (scaling) {
        int scalingFactorsCount = 2;
        int scalingFactorsIndices[2] = {0, 1};

        beagleResetScaleFactors(instance,
                                cumulativeScalingIndex);

        beagleAccumulateScaleFactors(instance,
                                     scalingFactorsIndices,
                                     scalingFactorsCount,
                                     cumulativeScalingIndex);
    }

    double logL = 0.0;

    // calculate the site likelihoods at the root node
    beagleCalculateRootLogLikelihoods(instance,               // instance
                                      (const int *)&rootIndex,// bufferIndices
                                      &categoryWeightsIndex,                // weights
                                      &stateFrequencyIndex,                  // stateFrequencies
                                      &cumulativeScalingIndex,// cumulative scaling index
                                      1,                      // count
                                      &logL);         // outLogLikelihoods


    std::vector<double> siteLogLikelihoods(nPatterns);
    beagleGetSiteLogLikelihoods(instance, siteLogLikelihoods.data());

    std::cout << "site-log-like:";
    for (double logLike : siteLogLikelihoods) {
        std::cout << " " << logLike;
    }
    std::cout << std::endl;

    double * seerootPartials = (double*) malloc(sizeof(double) * stateCount * nPatterns * rateCategoryCount);
    int offset = 0;
    for (int c = 0; c < rateCategoryCount; ++c) {
        for (int p = 0; p < nPatterns; ++p) {
            for (int s = 0; s < stateCount; ++s) {
                seerootPartials[offset++] = freqs[s];
            }
        }
    }
    beagleSetPartials(instance, rootPreIndex, seerootPartials);
    fprintf(stdout, "Setting preroot: %d\n", rootPreIndex);

//    beagleSetRootPrePartials(instance, // TODO Remove from API -- not necessary?
//                             (const int *) &rootPreIndex,               // bufferIndices
//                             &stateFrequencyIndex,                  // stateFrequencies
//                             1);                                    // count

    // update the pre-order partials
    beagleUpdatePrePartials(instance,
                            pre_order_operations,
                            4,
                            BEAGLE_OP_NONE);

    fprintf(stdout, "logL = %.5f (R = -18.04619478977292)\n\n", logL);

    int postBufferIndices[4] = {1, 0, 2, 3};
    int preBufferIndices[4] = {8, 9, 7, 6};
    int firstDervIndices[4] = {4 + transpose, 4 + transpose, 4 + transpose, 4 + transpose};
    int secondDervIndices[4] = {5 + transpose, 5 + transpose, 5 + transpose, 5 + transpose};
    int cumulativeScalingInices[4] = {6, 5, 4, 3};
    int categoryRatesIndex = categoryWeightsIndex;
    double* gradient = (double*) malloc(sizeof(double) * nPatterns * 4);
    double* diagonalHessian = (double*) malloc(sizeof(double) * nPatterns * 4);

    double * seeprePartials  = (double*) malloc(sizeof(double) * stateCount * nPatterns * rateCategoryCount);
    double * seepostPartials = (double*) malloc(sizeof(double) * stateCount * nPatterns * rateCategoryCount);

    double * tmpNumerator = (double*)   malloc(sizeof(double)  * nPatterns * rateCategoryCount);

    double * grand_denominator = (double*) malloc(sizeof(double)  * nPatterns);
    double * grand_numerator = (double*) malloc(sizeof(double)  * nPatterns);
    /// state frequencies stored in freqs
    /// category weights stored in weights


    beagleGetPartials(instance, rootIndex, BEAGLE_OP_NONE, seerootPartials);

    for(int i = 0; i < 5; i++){
        int postBufferIndex = 4-i;
        int preBufferIndex = 5+i;
        beagleGetPartials(instance, preBufferIndex, BEAGLE_OP_NONE, seeprePartials);

        std::cout<<"Pre-order Partial for node "<< 4-i << ": \n";

        int l = 0;
        for(int s = 0; s < rateCategoryCount; s++){
            std::cout<<"  rate category"<< s+1<< ": \n";
            for(int k = 0; k<nPatterns; k++){
                for(int j=0; j < stateCount; j++){
                    std::cout<<seeprePartials[l++]<<", ";
                }
                std::cout<<std::endl;
            }
            std::cout<<std::endl;
        }

    }

    free(patternWeights);

    free(patternLogLik);
    free(seepostPartials);
    free(seeprePartials);
    free(seerootPartials);
    free(tmpNumerator);
    free(grand_denominator);
    free(grand_numerator);
    free(gradient);
    free(diagonalHessian);
    free(matrix1);
    free(matrix2);

    beagleFinalizeInstance(instance);

#ifdef _WIN32
    std::cout << "\nPress ENTER to exit...\n";
    fflush( stdout);
    fflush( stderr);
    getchar();
#endif

}

//Gradient:
//-0.248521  -0.194621  -0.248521  0.36811
//-0.248521  -0.194621  -0.248521  0.114741
//0.221279  -0.171686  0.221279  -0.00658093
//0.22128  -0.171686  0.22128  -0.00658095
