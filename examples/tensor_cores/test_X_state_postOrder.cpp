/*
 *  tinyTest.c
 *  BEAGLE
 *
 *  Created by Andrew Rambaut on 20/03/2009.
 *  Copyright 2009 __MyCompanyName__. All rights reserved.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <libhmsbeagle/BeagleImpl.h>
#include <cmath>
#include <vector>

//#define JC

#ifdef _WIN32
#include <vector>
#endif

#include "libhmsbeagle/beagle.h"

const int STATE_SIZE = 61;
const bool IS_CODON = true;

//std::string stateSpace[STATE_SIZE] = {"A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"};
std::string stateSpace[STATE_SIZE] = {
        "AAA", "AAC", "AAG", "AAT", "ACA", "ACC", "ACG", "ACT",
        "AGA", "AGC", "AGG", "AGT", "ATA", "ATC", "ATG", "ATT",
        "CAA", "CAC", "CAG", "CAT", "CCA", "CCC", "CCG", "CCT",
        "CGA", "CGC", "CGG", "CGT", "CTA", "CTC", "CTG", "CTT",
        "GAA", "GAC", "GAG", "GAT", "GCA", "GCC", "GCG", "GCT",
        "GGA", "GGC", "GGG", "GGT", "GTA", "GTC", "GTG", "GTT",
        "TAC",  "TAT", "TCA", "TCC", "TCG", "TCT",
        "TGC", "TGG", "TGT", "TTA", "TTC", "TTG", "TTT"
};;



// Q matrix for JTT
double** rate = new double*[20];

// Amino acid
//char *human = (char*)"E";
//char *chimp = (char*)"G";
//char *gorilla = (char*)"R";
char *human = (char*)"GAG";
char *chimp = (char*)"GGG";
char *gorilla = (char*)"AGA";

//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTA";

//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTATTTCTACTAGGACTATGAGAATCGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTATTTCTACTAGGACTATAAGAATCGAACTCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTATTTCTACTAGGACTATGAGAATTGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTGTCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATA";
//char *human = (char*)"GAGAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGGAGCTTAAACCCCCTTATTTCTACTAGGACTATGAGAATCGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTTATACCCTTCCCGTACTAAGAAATTTAGGTTAAATACAGACCAAGAGCCTTCAAAGCCCTCAGTAAGTTG-CAATACTTAATTTCTGTAAGGACTGCAAAACCCCACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGACCAATGGGACTTAAACCCACAAACACTTAGTTAACAGCTAAGCACCCTAATCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAA-TCACCTCGGAGCTTGGTAAAAAGAGGCCTAACCCCTGTCTTTAGATTTACAGTCCAATGCTTCA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCCAAAGCTGGTTTCAAGCCAACCCCATGGCCTCCATGACTTTTTCAAAAGGTATTAGAAAAACCATTTCATAACTTTGTCAAAGTTAAATTATAGGCT-AAATCCTATATATCTTA-CACTGTAAAGCTAACTTAGCATTAACCTTTTAAGTTAAAGATTAAGAGAACCAACACCTCTTTACAGTGA";
//char *chimp = (char*)"GGGAAATATGTCTGATAAAAGAATTACTTTGATAGAGTAAATAATAGGAGTTCAAATCCCCTTATTTCTACTAGGACTATAAGAATCGAACTCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTATCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTTACACCCTTCCCGTACTAAGAAATTTAGGTTAAGCACAGACCAAGAGCCTTCAAAGCCCTCAGCAAGTTA-CAATACTTAATTTCTGTAAGGACTGCAAAACCCCACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGATTAATGGGACTTAAACCCACAAACATTTAGTTAACAGCTAAACACCCTAATCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAA-TCACCTCAGAGCTTGGTAAAAAGAGGCTTAACCCCTGTCTTTAGATTTACAGTCCAATGCTTCA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCTAAAGCTGGTTTCAAGCCAACCCCATGACCTCCATGACTTTTTCAAAAGATATTAGAAAAACTATTTCATAACTTTGTCAAAGTTAAATTACAGGTT-AACCCCCGTATATCTTA-CACTGTAAAGCTAACCTAGCATTAACCTTTTAAGTTAAAGATTAAGAGGACCGACACCTCTTTACAGTGA";
//char *gorilla = (char*)"AGAAAATATGTCTGATAAAAGAGTTACTTTGATAGAGTAAATAATAGAGGTTTAAACCCCCTTATTTCTACTAGGACTATGAGAATTGAACCCATCCCTGAGAATCCAAAATTCTCCGTGCCACCTGTCACACCCCATCCTAAGTAAGGTCAGCTAAATAAGCTATCGGGCCCATACCCCGAAAATGTTGGTCACATCCTTCCCGTACTAAGAAATTTAGGTTAAACATAGACCAAGAGCCTTCAAAGCCCTTAGTAAGTTA-CAACACTTAATTTCTGTAAGGACTGCAAAACCCTACTCTGCATCAACTGAACGCAAATCAGCCACTTTAATTAAGCTAAGCCCTTCTAGATCAATGGGACTCAAACCCACAAACATTTAGTTAACAGCTAAACACCCTAGTCAAC-TGGCTTCAATCTAAAGCCCCGGCAGG-TTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAT-TCACCTCGGAGCTTGGTAAAAAGAGGCCCAGCCTCTGTCTTTAGATTTACAGTCCAATGCCTTA-CTCAGCCATTTTACCACAAAAAAGGAAGGAATCGAACCCCCCAAAGCTGGTTTCAAGCCAACCCCATGACCTTCATGACTTTTTCAAAAGATATTAGAAAAACTATTTCATAACTTTGTCAAGGTTAAATTACGGGTT-AAACCCCGTATATCTTA-CACTGTAAAGCTAACCTAGCGTTAACCTTTTAAGTTAAAGATTAAGAGTATCGGCACCTCTTTGCAGTGA";

std::vector<std::string> convertSequenceToVector(char *sequence, bool is_codon) {
    std::vector<std::string> result;
    int nchar = is_codon ? 3 : 1;
    int n = strlen(sequence) / nchar;

    // Iterate through the string and extract substrings of length 3
    for (int i = 0; i < n; ++i)
    {
        std::string state(sequence + (i * nchar), nchar);
        result.push_back(state);
    }

    return result;
}

int* getStates(std::vector<std::string> sequence, int repeats) {
    int n = sequence.size();
    int *states = (int*) malloc(sizeof(int) * n * repeats);

    int k = 0;
    std::string *el;
    std::vector<std::string>::iterator sequenceItr;
    for (int r = 0; r < repeats; ++r) {
        for(sequenceItr = sequence.begin(); sequenceItr != sequence.end(); sequenceItr++) {
            el = std::find(std::begin(stateSpace), std::end(stateSpace), *sequenceItr);
            if(el == std::end(stateSpace)){
                states[k++] = STATE_SIZE;
            } else {
                states[k++] = std::distance(stateSpace, el);
            }
        }
    }
    return states;
}

double* getPartials(std::vector<std::string> sequence, int repeats) {
    int n = sequence.size();
    double *partials = (double*)malloc(sizeof(double) * n * STATE_SIZE);

    int k = 0;
    std::string *el;
    std::vector<std::string>::iterator sequenceItr;
    for(sequenceItr = sequence.begin(); sequenceItr != sequence.end(); sequenceItr++) {
        el = std::find(std::begin(stateSpace), std::end(stateSpace), *sequenceItr);
        if(el == std::end(stateSpace)){
            for(int j = 0; j < STATE_SIZE; j++){
                partials[k++] = 1;
            }
        } else {
            for(int j = 0; j < STATE_SIZE; j++){
                if(j == std::distance(stateSpace, el)) {
                    partials[k++] = 1;
                } else {
                    partials[k++] = 0;
                }
            }
        }
    }
    return partials;
}

void printFlags(long inFlags) {
    if (inFlags & BEAGLE_FLAG_PROCESSOR_CPU)      fprintf(stdout, " PROCESSOR_CPU");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_GPU)      fprintf(stdout, " PROCESSOR_GPU");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_FPGA)     fprintf(stdout, " PROCESSOR_FPGA");
    if (inFlags & BEAGLE_FLAG_PROCESSOR_CELL)     fprintf(stdout, " PROCESSOR_CELL");
    if (inFlags & BEAGLE_FLAG_PRECISION_DOUBLE)   fprintf(stdout, " PRECISION_DOUBLE");
    if (inFlags & BEAGLE_FLAG_PRECISION_SINGLE)   fprintf(stdout, " PRECISION_SINGLE");
    if (inFlags & BEAGLE_FLAG_COMPUTATION_ASYNCH) fprintf(stdout, " COMPUTATION_ASYNCH");
    if (inFlags & BEAGLE_FLAG_COMPUTATION_SYNCH)  fprintf(stdout, " COMPUTATION_SYNCH");
    if (inFlags & BEAGLE_FLAG_EIGEN_REAL)         fprintf(stdout, " EIGEN_REAL");
    if (inFlags & BEAGLE_FLAG_EIGEN_COMPLEX)      fprintf(stdout, " EIGEN_COMPLEX");
    if (inFlags & BEAGLE_FLAG_SCALING_MANUAL)     fprintf(stdout, " SCALING_MANUAL");
    if (inFlags & BEAGLE_FLAG_SCALING_AUTO)       fprintf(stdout, " SCALING_AUTO");
    if (inFlags & BEAGLE_FLAG_SCALING_ALWAYS)     fprintf(stdout, " SCALING_ALWAYS");
    if (inFlags & BEAGLE_FLAG_SCALING_DYNAMIC)    fprintf(stdout, " SCALING_DYNAMIC");
    if (inFlags & BEAGLE_FLAG_SCALERS_RAW)        fprintf(stdout, " SCALERS_RAW");
    if (inFlags & BEAGLE_FLAG_SCALERS_LOG)        fprintf(stdout, " SCALERS_LOG");
    if (inFlags & BEAGLE_FLAG_VECTOR_NONE)        fprintf(stdout, " VECTOR_NONE");
    if (inFlags & BEAGLE_FLAG_VECTOR_SSE)         fprintf(stdout, " VECTOR_SSE");
    if (inFlags & BEAGLE_FLAG_VECTOR_AVX)         fprintf(stdout, " VECTOR_AVX");
    if (inFlags & BEAGLE_FLAG_THREADING_NONE)     fprintf(stdout, " THREADING_NONE");
    if (inFlags & BEAGLE_FLAG_THREADING_OPENMP)   fprintf(stdout, " THREADING_OPENMP");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_CPU)      fprintf(stdout, " FRAMEWORK_CPU");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_CUDA)     fprintf(stdout, " FRAMEWORK_CUDA");
    if (inFlags & BEAGLE_FLAG_FRAMEWORK_OPENCL)   fprintf(stdout, " FRAMEWORK_OPENCL");
}

int main( int argc, const char* argv[] )
{
    // print resource list
    BeagleResourceList* rList;
    rList = beagleGetResourceList();
    fprintf(stdout, "Available resources:\n");
    for (int i = 0; i < rList->length; i++) {
        fprintf(stdout, "\tResource %i:\n\t\tName : %s\n", i, rList->list[i].name);
        fprintf(stdout, "\t\tDesc : %s\n", rList->list[i].description);
        fprintf(stdout, "\t\tFlags:");
        printFlags(rList->list[i].supportFlags);
        fprintf(stdout, "\n");
    }
    fprintf(stdout, "\n");

//    bool scaling = true;
    bool scaling = false; // disable scaling for now

    bool doJC = true;

    bool singlePrecision = false;
    bool useSSE = false;

    int nRepeats = 1;

    // get the number of site patterns
    int nPatterns = strlen(human) * nRepeats;

    // change # rate category to 2
//    int rateCategoryCount = 4;
    int rateCategoryCount = 1;

    int scaleCount = (scaling ? 7 : 0);

    bool useGpu = true;

    bool useTipStates = false;

    // int whichDevice = -1;
    // if (useGpu) {
    //     if (argc > 2) {
    //         whichDevice = atol(argv[2]);
    //         if (whichDevice < 0) {
    //             whichDevice = -1;
    //         }
    //     }
    // }
    int *whichDevice = new int[1];
    whichDevice[0] = 1;

    BeagleInstanceDetails instDetails;

    long preferenceFlags = BEAGLE_FLAG_SCALERS_RAW;

    if (useGpu) {
        preferenceFlags |= BEAGLE_FLAG_PROCESSOR_GPU;
    } else {
        preferenceFlags |= BEAGLE_FLAG_PROCESSOR_CPU;
    }

    if (singlePrecision) {
        preferenceFlags |= BEAGLE_FLAG_PRECISION_SINGLE;
    } else {
        preferenceFlags |= BEAGLE_FLAG_PRECISION_DOUBLE;
    }

    long requirementFlags = BEAGLE_FLAG_EIGEN_REAL;
    if (useSSE) {
        requirementFlags |= BEAGLE_FLAG_VECTOR_SSE;
    } else {
        requirementFlags |= BEAGLE_FLAG_VECTOR_NONE;
    }

    // create an instance of the BEAGLE library
    int instance = beagleCreateInstance(
            3,				/**< Number of tip data elements (input) */
            10,	            /**< Number of partials buffers to create (input) */
            useTipStates ? 3 : 0,		        /**< Number of compact state representation buffers to create (input) */
            STATE_SIZE,		/**< Number of states in the continuous-time Markov chain (input) */
            nPatterns,		/**< Number of site patterns to be handled by the instance (input) */
            1,		        /**< Number of rate matrix eigen-decomposition buffers to allocate (input) */
            6 * 2,		    /**< Number of rate matrix buffers (input) */
            rateCategoryCount,/**< Number of rate categories (input) */
            scaleCount,       /**< Number of scaling buffers */
            whichDevice, /**< List of potential resource on which this instance is allowed (input, NULL implies no restriction */
            1,			    /**< Length of resourceList list (input) */
            preferenceFlags,
            requirementFlags, /**< Bit-flags indicating required implementation characteristics, see BeagleFlags (input) */
            &instDetails);
    if (instance < 0) {
        fprintf(stderr, "Failed to obtain BEAGLE instance\n\n");
        exit(1);
    }


    int rNumber = instDetails.resourceNumber;
    fprintf(stdout, "Using resource %i:\n", rNumber);
    fprintf(stdout, "\tRsrc Name : %s\n",instDetails.resourceName);
    fprintf(stdout, "\tImpl Name : %s\n", instDetails.implName);
    fprintf(stdout, "\tImpl Desc : %s\n", instDetails.implDescription);
    fprintf(stdout, "\n");

    if (useTipStates) {
        // set the sequences for each tip using state likelihood arrays
        int *humanStates = getStates(convertSequenceToVector(human, IS_CODON), nRepeats);
        int *chimpStates = getStates(convertSequenceToVector(chimp, IS_CODON), nRepeats);
        int *gorillaStates = getStates(convertSequenceToVector(gorilla, IS_CODON), nRepeats);

        beagleSetTipStates(instance, 0, humanStates);
        beagleSetTipStates(instance, 1, chimpStates);
        beagleSetTipStates(instance, 2, gorillaStates);

        free(humanStates);
        free(chimpStates);
        free(gorillaStates);

    } else {
        // set the sequences for each tip using partial likelihood arrays
        double *humanPartials = getPartials(convertSequenceToVector(human, IS_CODON), nRepeats);
        double *chimpPartials = getPartials(convertSequenceToVector(chimp, IS_CODON), nRepeats);
        double *gorillaPartials = getPartials(convertSequenceToVector(gorilla, IS_CODON), nRepeats);

        beagleSetTipPartials(instance, 0, humanPartials);
        beagleSetTipPartials(instance, 1, chimpPartials);
        beagleSetTipPartials(instance, 2, gorillaPartials);

        free(humanPartials);
        free(chimpPartials);
        free(gorillaPartials);
    }

#ifdef _WIN32
    std::vector<double> rates(rateCategoryCount);
#else
    double rates[rateCategoryCount];
#endif

    rates[0] = 1.0;

    std::cout << "Set category rates" << std::endl;
    beagleSetCategoryRates(instance, &rates[0]);


    double* patternWeights = (double*) malloc(sizeof(double) * nPatterns);

    for (int i = 0; i < nPatterns; i++) {
        patternWeights[i] = 1.0;
    }

    beagleSetPatternWeights(instance, patternWeights);

    // create base frequency array
    double freqs[STATE_SIZE];
    std::fill_n(freqs, STATE_SIZE, ((double) 1)/STATE_SIZE);
//    double freqs[4] = { 0.25, 0.25, 0.25, 0.25 };

    beagleSetStateFrequencies(instance, 0, freqs);

    // create an array containing site category weights
#ifdef _WIN32
    std::vector<double> weights(rateCategoryCount);
#else
    double weights[rateCategoryCount];
#endif
    for (int i = 0; i < rateCategoryCount; i++) {
        weights[i] = 1.0/rateCategoryCount;
//        weights[i] = 2.0 * double(i + 1)/ double(rateCategoryCount * (rateCategoryCount + 1));
    }

    beagleSetCategoryWeights(instance, 0, &weights[0]);

    //eigen decomposition
    double evec[STATE_SIZE * STATE_SIZE] = {
            -0.176776695296637,-0.0515269134098765,-0.0733274226199565,0.216936066596289,-0.195233327805403,0.253560679752022,0.0144037229225474,0.160269618286542,-0.193802684766088,-0.0529304837437648,0.237308492524254,-0.191724273062692,-0.290380935980816,0.150563833223437,0.0946391289997731,0.470980014416091,0.211034820324803,-0.0316437627210086,0.262783415936709,-0.134732781888771,0.0848637333890522,0.0383620361584895,-0.0692606636303387,-0.20383920695648,0.132584299676241,0.000210390621165666,0.195444744152806,-0.162587275744495,0.158408527804148,0.124056952006793,-0.0502622509979001,0.0340935180387029,-0.176776695296637,0.0200756612452059,-0.111713722806084,0.0371321417979809,0.154690963764508,0.0640400461990848,-0.152293302340988,-0.0290934652336941,0.0599657580555658,-0.0378174186089194,-0.0436608509539513,-0.389182666502875,0.0656862840341563,0.0417809085643233,-0.115789839062362,-0.269244262165865,-0.294852688764193,-0.178885142797729,0.143462104963116,0.0632899926428531,0.0426105811200432,-0.229019112146385,-0.39169188739724,0.230399526311357,0.15843300057734,0.000812100801092184,0.315157086375062,0.0228466293715053,0.28599869313412,-0.00377451778690871,0.127632980116255,0.157220714379128,-0.176776695296637,0.0501507387963873,0.0534252513328493,-0.132931067354332,0.0566037960028659,-0.0243049466455827,-0.0770725811174487,0.0909518401694139,-0.0413021540714114,-0.00380225522080222,-0.00755993990605082,-0.0551059814373441,-0.2029272773366,0.204055443878603,-0.00142156966056771,0.134158796275761,-0.263033924719883,-0.0113875950541979,-0.187001415958239,0.234438127722725,0.200327550001171,0.070775715151061,-0.135851210722719,-0.0457154403908965,0.227483156370666,0.0865690611667475,-0.1157692040539,0.0199662149792851,-0.248868602814259,-0.459575955317136,-0.493614660206651,0.0853925773559711,-0.176776695296637,0.047395309671911,0.0343743724176931,-0.0573040946873944,-0.092888733506713,-0.0876071973218221,0.2427701641787,0.191432537193821,0.160329931603912,-0.184475643687245,-0.373945165268558,0.0889530939394879,-0.0141557341068118,0.0526844660825961,-0.225649177708939,0.201840025925584,0.0730273025479909,-0.182084095892301,0.208892341000878,0.406542987052324,0.111526757015023,0.0636410498891592,0.299240939825239,0.227564404346037,0.246875657691554,-0.117265611420618,-0.0255398442776235,0.116556785724667,0.0302095734436611,0.167279201732426,0.125060071173645,0.0966549479745064,-0.176776695296637,0.0121507543506554,-0.0272084182350322,-0.00899162632728194,0.0162057058660303,0.0325990772089567,0.0931160652144283,0.0992369899538528,0.0396060332978403,-0.0328319737949026,0.0251692187133686,-0.0793828574519548,0.0542607716535059,0.0148915773741308,-0.0496287527111696,-0.0383172654244313,-0.148297070098505,-0.0267862635647194,-0.0230131205845526,0.114859951834002,-0.0759534174180243,0.144922765033692,0.0697997346163864,0.0246412601889416,0.0243532424706234,0.125395866259664,0.0296394173493608,-0.261933768419444,0.170910187187372,-0.128336810120484,0.0598185626344475,-0.852943044128652,-0.176776695296637,0.174650948006642,0.114649773987481,-0.0815659592255853,-0.114659397156583,-0.175425199368257,-0.330300650402903,0.230684324685314,-0.165168151396886,0.465956851019065,-0.198677066933451,0.347512949330584,-0.0793156834989059,0.219670006484307,-0.067196155080207,-0.0916928369756702,0.0598346743972976,-0.14704242857114,-0.0328659115777035,-0.160768215841193,0.168779568250715,0.0221910438881271,0.0661860316472535,0.0450937249895994,-0.173814909297057,-0.10717933043731,0.25495439785082,-0.109553036218856,0.169327439084512,-0.0592158152225116,0.0412833899018433,-0.00233779683275336,-0.176776695296637,0.175710838602599,-0.105671090997169,-0.0102461372517226,-0.0444856804925373,-0.135608685251197,0.205652740265635,0.0576362898397928,0.0257379473408575,-0.025234310485205,0.0184211344387055,0.099294942852276,-0.0468731669036677,-0.235904721502703,-0.160357679466839,-0.313606806128889,0.126869384157036,0.0618473636165679,0.12387517502506,-0.295107512868665,0.224215665549501,-0.023228409797735,0.0414865180679807,-0.068793596949555,0.294453477349126,0.529310712608559,-0.0868471313214035,-0.294041550828098,-0.0731342936425276,-0.00477838521913673,0.00629110579462927,0.145958025593881,-0.176776695296637,-0.180257309359125,0.0180315054572456,-0.0568804757203898,0.245095973395458,0.081506785132616,-0.174263967777637,-0.596076206110276,-0.00111115461297841,-0.21175779210442,-0.0262171874699947,0.0850719150109163,-0.152772235966579,0.349275511831399,-0.235516051761349,-0.0316234348510784,0.110558111307359,0.0598095450690518,-0.0860488711019864,-0.0289780179206234,0.343632659723578,0.111229778729425,0.100014140665131,-0.110755715581852,-0.0357556048301859,0.0369240568056467,-0.00426088288776703,-0.0158329334094417,-0.000851942007588441,0.0978082406221245,0.18201076965035,-0.0579959592820281,-0.176776695296637,-0.115623089978353,0.268672164735831,-0.292215773235587,0.161446342979388,-0.0768177889653406,-0.376572664427236,0.0421985425234215,-0.0765796003196496,0.0906770662053286,-0.0220501381161268,-0.371898879901782,0.0877782698884106,-0.450393341024256,0.127327554412709,0.0449619674193266,0.283356238971903,-0.212127972344876,-0.0190778133351534,0.0786224733047566,0.107789731365056,0.160641879511399,0.0302738626969116,-0.0905635081602369,0.0836807008341934,0.00342504865351031,-0.0551453910773279,-0.00703708707894744,-0.14455391376119,0.167357843984088,0.00990609336137063,-0.0556199735388587,-0.176776695296637,-0.032139005165119,0.055704664402994,0.188966583792603,-0.0796473840427083,0.262949133594369,-0.0731262645692136,0.0487995731058921,-0.0750537300794879,0.200692753711513,-0.175559189906554,-0.0452508873255876,-0.172879929236831,0.000349528048494387,0.269970174719425,-0.094338641253271,-0.114390005624048,0.490738092157277,-0.280983830112099,0.190910502074087,-0.0328982309775498,0.0535207152333676,0.0308709885788576,0.279762698750102,0.128775850037984,0.101432744790689,0.0307008521034573,-0.126719223959614,-0.202235534389021,0.276833393512746,0.19591776244399,0.054533107216921,-0.176776695296637,0.116534210104712,-0.10067720205159,0.151011842862618,-0.0479793572099448,0.195159340774789,0.0470893719938323,-0.02729583478358,0.10103600230686,0.103384191862456,0.0362253684955056,-0.29527561237791,-0.0327352121415824,-0.176085633846217,-0.347894048337002,-0.134847847843951,-0.0383647282454282,0.0933803846153161,-0.125147063610601,-0.248705779349549,-0.114447049026775,0.273300113371123,0.419767792933091,-0.0651672585865458,0.0163151116181021,-0.307801705498375,0.212055169051899,0.167594419054483,-0.0917173748969289,-0.235513314964357,-0.0539414597073744,0.0859451627302236,-0.176776695296637,0.332572754461973,0.264680755861135,0.0701834359185605,0.141369715332938,-0.102778902868229,0.398353777680237,-0.29917603703255,-0.586276595651989,0.0128160946660223,-0.0547122527723714,-0.0737556949588878,0.124929471504472,-0.0146055979492256,0.078539986019796,0.120577635181696,-0.090310957535698,-0.16839518426218,-0.121658290676693,-0.0156845179496688,-0.15474543719775,0.0547128775434748,-0.0155026202992456,0.0419312033671274,-0.0177560929527618,-0.0391122525263024,-0.0293261966652904,-0.0893787875377257,0.0510285606649394,-0.0399104783044512,0.0975652343366833,0.103293059621749,-0.176776695296637,0.0517449237256802,-0.0591186295857601,-0.0551502432020084,-0.0993138120026131,0.0255890853429504,0.055800327042255,0.0629095707498638,-0.00186044891992779,0.0248131857963468,-0.0399179554088812,0.121381285660685,-0.120858229745348,0.0601838416481022,0.192298567973556,-0.0581259346012754,0.0081667743348048,-0.120450866173878,0.00800673396805825,-0.209171057202586,-0.0381658563432909,-0.0185714434008108,-0.254331769775567,-0.210076125794156,0.28998164535526,-0.085273798375962,-0.10248236973911,0.505140602933428,-0.249845978950798,-0.144562307511893,0.471154110764627,-0.187260181348609,-0.176776695296637,-0.03501498967233,0.018816592470367,0.370163210853322,0.0887569008126704,-0.187299166739319,0.0244338646524458,-0.248625554004688,0.388409811343225,-0.0626362644044445,-0.18975629122872,0.09828473828078,-0.295068344963368,-0.199769380595468,0.415132175835618,0.00410771896587529,0.0765481761188816,-0.263314971150817,-0.0424847013726948,-0.0224722201459175,-0.075886290735883,-0.163250437443246,0.0706686972929581,-0.00781893244326898,-0.051662382855213,-0.113204445658652,0.139649306646585,-0.196553281515326,-0.0296566795238027,-0.16816080364857,-0.0851294891930469,-0.00285101346745958,-0.176776695296637,0.0413174145146222,-0.0860253751877132,-0.0499365601714623,-0.086192297123647,0.267162852603374,-0.117796674278438,-0.290574618240041,0.233369391023204,0.281247382506792,0.251261592881841,0.318131827667164,0.472399840506325,-0.0389085019005059,-0.00639125140996974,0.265778471273,0.0239677141515921,-0.127723764712164,0.0104976580885641,0.12674903238328,-0.177892190456444,0.0521248991546002,-0.0254707439140276,0.0699882390653527,0.243884047176157,0.117421084537935,0.0987627818433723,-0.0972213870619341,-0.0570936537621099,-0.0852270542212576,0.0279183788074343,0.100144238321095,-0.176776695296637,0.196942674008525,-0.0220126692700426,-0.0191840040210132,0.0983491050012001,-0.115089931551136,0.0122039745307053,0.29265822823895,0.194775659038472,-0.374154648967247,0.0606350199630792,0.0153133098604909,0.264119551088878,0.159712479064015,0.00590439039708669,0.050646029036768,0.246367578489206,0.0782462818402466,-0.593016985897746,-0.0719104070187974,-0.0427333372979816,-0.0238550913767919,-0.152929324561423,-0.142607107540109,0.036113547931415,-0.104364731998724,0.14313653470039,-0.0872666381779721,0.0827518078050389,0.135957278293912,0.00758684214039255,0.0722420919843476,-0.176776695296637,-0.290034259334622,-0.322650363971149,0.352778203146875,-0.17917977002017,-0.556461806167128,-0.177188044033414,-0.0129777049316184,-0.202619661204702,0.0602364497915742,0.162628048932769,-0.155383046113214,0.24542877414133,0.152509494259681,0.0389081947127691,-0.0189556658694804,-0.0206707516356358,0.0172617116860841,-0.0406352368672621,0.0998270032285531,-0.0144946135458782,-0.00780937623202308,0.191245505226678,0.005089166446528,0.0827194737616244,0.0257566255248143,-0.188186871766548,0.0651738877424072,-0.0021344269951244,-0.0265020080791543,0.0594332623619962,0.0386255566593739,-0.176776695296637,0.0309820933151342,-0.0752568522712066,0.110640998440895,0.0105493359148429,-0.0391884019687501,0.0662754501370455,-0.0717367563444004,0.0111284189063095,0.00487495003501539,-0.0224945473153906,0.0179335482708828,0.0295993995596494,0.0302728019324552,-0.0290411190247202,0.0900454969404908,0.103540129736294,-0.111850446403949,-0.0179484511850822,-0.286334718836761,0.0192950335094353,0.0908618246271299,-0.13963790571464,0.455911559357658,-0.154804200848583,0.215833193901185,0.0874056464167735,0.406258207063463,-0.161869451061658,0.313807851221271,-0.418198261879586,-0.206534205176692,-0.176776695296637,-0.420404509045518,0.10092218585721,-0.0139624619102284,-0.310808145815088,0.286830130428689,-0.116864709338937,0.0775665198138271,-0.314100453500267,-0.40735300166779,-0.106086446211606,0.256044280023963,0.0433011605796252,-0.215404539059126,-0.0580423865020212,-0.131888547681041,-0.0869720408774446,-0.188438522653744,-0.163326087287406,-0.0442604250851546,-0.122608294578319,-0.138809630375026,0.0861517941477222,0.0285218302844689,-0.0826287733541384,0.121004133357795,0.0715807575669644,0.0428856858735293,0.0675744968557649,-0.136677195558768,-0.0546484467446962,0.0610443231462072,-0.176776695296637,-0.0765531630953045,-0.0478148993661325,0.146349841152793,-0.00985524104812295,0.0627529740245282,0.0909907762711085,0.14138583968874,0.046085279181154,-0.00912791579746037,-0.10005260576207,-0.0723739676108683,0.206215751808001,-0.0329665747937944,-0.214180108527329,0.148939968027107,-0.0444993126365184,-0.0215924080709218,0.137462233170759,-0.0063405633664791,0.195636973002661,-0.0679095130109922,-0.257974745060413,0.00426983682647641,-0.483564233798712,-0.0925660307562124,-0.0574282722710069,-0.26697655076465,-0.522716213743809,-0.11021280273884,0.209975780568123,0.0217626302346138,-0.176776695296637,0.315769709523005,0.163304642671906,0.186739543634215,0.141240039171115,0.00361706014618233,-0.245717861704205,0.143134861277897,0.0253345398728635,-0.178975457735397,0.546972755637459,0.211791217965699,-0.237902937084635,-0.0752831052938403,-0.109717557608666,-0.126923717355786,-0.213878511039163,-0.129565342568914,0.104382720444599,0.174663671295764,-0.0998305119172047,-0.00499989545817302,0.0984381790102194,0.0445564244123913,-0.132955135612577,-0.0350339402993968,-0.193487786402265,0.0534855764318948,-0.0885785269258513,0.201065046759339,0.0741728532766607,0.0311868959554719,-0.176776695296637,0.0257936715288339,0.0699348122340868,-0.0106658191075349,-0.0171285995172646,0.0741838869280653,0.111688279658624,0.0253462733730371,0.167692668641936,0.200976570080622,-0.132114914153173,-0.150086757649167,0.0755527388172144,0.107180978732757,0.0466877770622215,0.0464847648099579,-0.27339190411172,-0.0889141223672022,-0.0619697439293561,0.104871999152133,-0.0335123547818783,-0.216131150507896,0.216450433144288,-0.522999018065552,-0.26793755805379,0.396212012479509,0.0468289903061836,0.228595592555056,0.0600553747136325,0.237771585700487,-0.0457117564209259,0.0545954140030143,-0.176776695296637,0.0577507231373969,0.0125783251385813,0.0303976170137378,0.02036281677693,0.103680037714482,-0.0701318754020874,0.0595990019975157,0.182068356121016,-0.0354560056747997,-0.0695316343500045,-0.0403480080826814,0.0559045326902254,-0.120931498600025,0.167727956048242,0.214353316899456,-0.0823831433110389,0.125074845715144,-0.0160670926077166,-0.181351252785071,0.189616161038387,0.246541718228519,-0.0260033416210022,0.180665968332661,-0.23157380624883,0.108568930027996,-0.455618959621886,0.119557325201887,0.486309432128307,-0.240704656394375,0.14939762227928,0.149390267865927,-0.176776695296637,-0.0150325389341347,-0.0567204468404756,0.100772484293593,-0.174771868953539,0.114708080157109,0.122456380462543,-0.0634006289716581,0.0142987217882575,0.0796484139762101,-0.0789667384117952,0.0325173800059989,-0.00734231958200127,0.0869019028040612,0.00537280840195345,-0.437949009424529,0.293156099705075,-0.0572793817580062,0.113103034003238,0.317362831259705,-0.160677266622367,0.406823269398961,-0.338209398408112,-0.218145950362233,-0.139588268638722,-0.0920974250391705,-0.170226644288673,-0.00450635401671953,0.120781763825355,0.0667823266887292,-0.203825014228052,0.0746483568369932,-0.176776695296637,-0.577577739359988,0.267798506366593,-0.0917292339633761,0.271387300764344,-0.117275753730623,0.397861336262142,0.169001601757238,0.127143937843015,0.264885355905269,0.277298700482041,0.111079264102875,-0.10015345382452,0.0272817566621169,-0.0880981153761764,-0.0218683399910613,-0.0994969739083311,0.000340797658011465,-0.072164779346459,-0.119491509695491,-0.0484739037230915,0.0720395897158091,-0.0709091827949654,0.0602439406200368,0.0623393122028523,-0.110024237804327,0.0109401442984449,-0.0316667942874089,0.0920784779691874,0.0669586929315033,0.0239362184399522,0.0997739243601838,-0.176776695296637,0.0363092732429809,-0.0731704488512868,-0.207171197344625,-0.0839669321412601,0.00538286871401741,0.14605035918133,-0.0354106826524667,-0.0362328486666694,-0.15539321422081,0.152712557880279,0.110540712964997,0.270454396464927,-0.0500402504613593,0.44612923401119,-0.182830217821245,-0.248005935636739,0.159370991097509,0.228497614411493,-0.0307686925998054,0.423270125628586,0.062555046760418,0.137577294801717,-0.061237989014243,-0.0324069632862561,-0.313935828679601,0.186093316056822,0.0161692037269364,-0.024350150618805,0.119649417928097,-0.157367159349328,-0.0200513188857561,-0.176776695296637,-0.0214994858966832,0.0551962978789487,-0.291195857831553,0.121497801966067,-0.00558493347705685,-0.117786543409668,0.0785016465140608,0.0639917311884402,-0.178207752054163,-0.088294944850189,-0.130819879967895,0.0458331609943408,0.419388718239397,0.21109628425866,-0.0873904538257547,0.041220218536297,0.050479905560932,0.325273956290143,-0.229245295409535,-0.496052929885244,0.0636537284180624,0.199988166290676,0.119300063857523,-0.0585807970251136,0.0941238178078758,-0.0530132498959161,-0.152051509797159,-0.165852371892432,-0.0862764615464943,0.00181047338460466,0.120586046770515,-0.176776695296637,-0.0169400075661806,-0.693523895025838,-0.25002682025206,0.40360465844052,0.055019128315708,0.0146578299688465,0.063047680907178,-0.209754169061676,0.0713743401346152,-0.0965935831581678,0.173903423970391,-0.182515325611455,-0.216393360617946,-0.00418548583115228,0.114091349606301,-0.011944587608459,0.0201801293314833,-0.0409234286289473,0.0810987968100876,-0.158000747982585,-0.0681144330567633,0.0173288160381496,-0.0601035355907613,-0.100870382330403,-0.0793047048314927,-0.050987659533941,-0.0244298318314734,0.0497839760894467,0.0802418360463299,-0.0347259608718431,0.0303731196816014,-0.176776695296637,-0.00580319369755418,0.246715935490136,0.217379135555285,0.217762783598592,-0.154924208538873,-0.167293849909854,-0.00988188445983794,-0.0529254469125437,-0.0763905385630099,-0.222104872201763,0.203145882061386,0.146514268543789,-0.181019146328033,-0.176764740159203,0.13247669528387,-0.0159417857876358,0.513770344135953,0.312368886372027,-0.0151586265780724,-0.163046768438744,-0.0888281344971061,-0.160176141723607,-0.222801573041452,0.120117683273825,-0.0576689081801612,0.0883893244788807,0.14348767096869,0.0829392938765435,-0.0404249541905042,-0.157129435301393,-0.0875971592275214,-0.176776695296637,0.0569760802429317,-0.00280326399219712,-0.393058255646755,-0.519392221014731,-0.319895378783735,-0.00658460592420509,-0.270193558412285,0.139072530808263,-0.0402799285522789,0.0522089470231608,-0.0737677384900347,-0.253570295574514,-0.147071130682993,-0.163953251351895,0.165365629985151,-0.190433526071671,0.168477447552834,-0.0622432627207578,-0.0425107066915184,-0.188738793472396,-0.0277220852006273,-0.192536737978566,0.00777446646056728,-0.0989737064947219,-0.10225390543535,-0.00208938204172922,-0.101528048467934,0.0383848833543441,0.14169786671172,0.0228129985484124,0.00881646509506809,-0.176776695296637,0.0528449886427719,0.0550847158829552,-0.15495356655664,-0.0233311352261833,-0.0186801682803471,0.152375205611673,-0.0273713380241861,-0.0358092673546868,0.04929561700928,0.271115099878917,-0.0797648695268882,-0.0734176746437657,-0.0158442267167905,0.0416270130134877,-0.0700377211772036,0.460623776368372,0.24764529900343,0.0376282642667438,0.302629577053017,0.0511620639353478,-0.35341540204651,0.0856891788961913,0.171644841659239,-0.234558433876748,0.130432733873088,0.18477710812862,0.224458244422985,0.054986058760064,-0.347789062163594,0.078873373578166,-0.0247096865726454,-0.176776695296637,0.0427334373928211,0.0578041988856195,-0.0022819512492178,-0.0700893367109608,0.228201302620454,0.00681396860213557,-0.0525466708750757,0.0125496481577726,0.15594538258255,-0.0436606124725624,-0.0867786515087947,0.074890383926552,0.0939177605424068,-0.0875339562869204,-0.0951671776559054,0.118596848465198,-0.0191408679720927,-0.0296580511409324,-0.152874644579628,0.0354313908728484,-0.556233936262734,0.0693075997224161,0.0332658032012755,0.149321043176848,-0.336345656275617,-0.505105731482053,-0.102891986933018,0.0619305682894717,0.12037504884887,-0.218003988662068,-0.128380105364518
    };
    double ivec[STATE_SIZE * STATE_SIZE] = {
            -0.176776695296636,-0.176776695296636,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296636,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.176776695296637,-0.0515269134098769,0.0200756612452065,0.0501507387963874,0.0473953096719109,0.0121507543506557,0.174650948006641,0.175710838602599,-0.180257309359124,-0.115623089978354,-0.0321390051651195,0.116534210104713,0.332572754461972,0.0517449237256805,-0.0350149896723309,0.0413174145146223,0.196942674008525,-0.290034259334621,0.0309820933151342,-0.420404509045518,-0.0765531630953046,0.315769709523004,0.0257936715288336,0.0577507231373965,-0.0150325389341347,-0.577577739359989,0.0363092732429813,-0.0214994858966826,-0.0169400075661772,-0.00580319369755542,0.0569760802429322,0.052844988642772,0.0427334373928206,-0.0733274226199578,-0.111713722806084,0.0534252513328498,0.0343743724176936,-0.0272084182350321,0.114649773987481,-0.10567109099717,0.0180315054572467,0.268672164735833,0.0557046644029937,-0.100677202051591,0.264680755861134,-0.0591186295857598,0.0188165924703656,-0.0860253751877133,-0.0220126692700425,-0.322650363971151,-0.0752568522712074,0.100922185857211,-0.0478148993661327,0.163304642671904,0.0699348122340873,0.0125783251385814,-0.0567204468404763,0.267798506366597,-0.0731704488512868,0.0551962978789501,-0.693523895025836,0.246715935490136,-0.00280326399219732,0.0550847158829553,0.0578041988856192,0.216936066596288,0.0371321417979827,-0.132931067354331,-0.0573040946873949,-0.00899162632728206,-0.0815659592255876,-0.0102461372517228,-0.0568804757203862,-0.292215773235586,0.188966583792601,0.151011842862617,0.0701834359185598,-0.0551502432020091,0.370163210853325,-0.0499365601714632,-0.0191840040210124,0.352778203146876,0.110640998440896,-0.0139624619102337,0.146349841152793,0.186739543634215,-0.0106658191075355,0.030397617013738,0.10077248429359,-0.0917292339633729,-0.207171197344626,-0.291195857831551,-0.250026820252053,0.217379135555287,-0.393058255646759,-0.154953566556641,-0.00228195124921967,-0.195233327805401,0.154690963764508,0.0566037960028648,-0.0928887335067131,0.0162057058660302,-0.114659397156583,-0.0444856804925373,0.245095973395458,0.161446342979385,-0.079647384042706,-0.0479793572099434,0.14136971533294,-0.0993138120026137,0.0887569008126749,-0.0861922971236487,0.0983491050011999,-0.179179770020166,0.0105493359148439,-0.310808145815088,-0.0098552410481215,0.141240039171117,-0.0171285995172645,0.0203628167769302,-0.174771868953538,0.271387300764344,-0.0839669321412627,0.121497801966064,0.403604658440515,0.217762783598596,-0.519392221014735,-0.023331135226185,-0.0700893367109609,0.253560679752022,0.064040046199084,-0.0243049466455821,-0.0876071973218221,0.0325990772089567,-0.175425199368256,-0.135608685251198,0.0815067851326148,-0.0768177889653393,0.262949133594368,0.195159340774788,-0.102778902868228,0.0255890853429508,-0.187299166739321,0.267162852603373,-0.115089931551136,-0.556461806167128,-0.0391884019687505,0.28683013042869,0.0627529740245278,0.00361706014618206,0.074183886928065,0.103680037714482,0.114708080157108,-0.117275753730623,0.00538286871401796,-0.00558493347705661,0.0550191283157088,-0.154924208538874,-0.319895378783734,-0.0186801682803466,0.228201302620454,0.0144037229225471,-0.152293302340988,-0.0770725811174488,0.2427701641787,0.0931160652144283,-0.330300650402902,0.205652740265635,-0.174263967777637,-0.376572664427236,-0.0731262645692136,0.0470893719938325,0.398353777680237,0.0558003270422546,0.0244338646524462,-0.117796674278438,0.0122039745307048,-0.177188044033414,0.0662754501370456,-0.116864709338937,0.0909907762711085,-0.245717861704205,0.111688279658624,-0.0701318754020875,0.122456380462543,0.397861336262142,0.14605035918133,-0.117786543409668,0.0146578299688467,-0.167293849909854,-0.00658460592420471,0.152375205611673,0.00681396860213547,0.160269618286542,-0.0290934652336941,0.0909518401694139,0.191432537193822,0.0992369899538528,0.230684324685314,0.0576362898397924,-0.596076206110275,0.0421985425234223,0.0487995731058926,-0.0272958347835798,-0.299176037032552,0.0629095707498639,-0.248625554004688,-0.290574618240041,0.29265822823895,-0.0129777049316202,-0.0717367563444005,0.077566519813827,0.14138583968874,0.143134861277897,0.0253462733730373,0.0595990019975164,-0.0634006289716582,0.169001601757238,-0.0354106826524671,0.0785016465140613,0.0630476809071776,-0.00988188445983793,-0.270193558412285,-0.027371338024186,-0.0525466708750751,-0.193802684766088,0.0599657580555662,-0.0413021540714117,0.160329931603912,0.03960603329784,-0.165168151396885,0.025737947340858,-0.00111115461297951,-0.0765796003196499,-0.0750537300794878,0.10103600230686,-0.586276595651989,-0.00186044891992778,0.388409811343226,0.233369391023202,0.194775659038472,-0.2026196612047,0.01112841890631,-0.314100453500268,0.046085279181154,0.025334539872865,0.167692668641935,0.182068356121015,0.0142987217882573,0.127143937843016,-0.0362328486666699,0.06399173118844,-0.209754169061677,-0.0529254469125438,0.139072530808262,-0.0358092673546864,0.0125496481577718,-0.0529304837437641,-0.0378174186089182,-0.00380225522080168,-0.184475643687245,-0.0328319737949023,0.465956851019064,-0.025234310485206,-0.21175779210442,0.0906770662053284,0.200692753711513,0.103384191862456,0.0128160946660224,0.0248131857963467,-0.062636264404445,0.281247382506791,-0.374154648967246,0.0602364497915747,0.00487495003501515,-0.407353001667791,-0.00912791579746043,-0.178975457735398,0.200976570080623,-0.0354560056747999,0.0796484139762103,0.264885355905269,-0.15539321422081,-0.178207752054163,0.0713743401346143,-0.0763905385630107,-0.040279928552279,0.0492956170092804,0.15594538258255,0.237308492524254,-0.0436608509539525,-0.00755993990605057,-0.373945165268558,0.0251692187133682,-0.198677066933449,0.0184211344387054,-0.0262171874699939,-0.0220501381161294,-0.175559189906554,0.0362253684955045,-0.0547122527723724,-0.0399179554088805,-0.18975629122872,0.251261592881843,0.0606350199630791,0.162628048932769,-0.0224945473153902,-0.106086446211606,-0.100052605762071,0.546972755637459,-0.132114914153173,-0.0695316343500047,-0.078966738411795,0.277298700482041,0.152712557880279,-0.0882949448501885,-0.0965935831581679,-0.222104872201764,0.0522089470231609,0.271115099878916,-0.0436606124725624,-0.191724273062691,-0.389182666502875,-0.0551059814373438,0.0889530939394867,-0.0793828574519545,0.347512949330581,0.099294942852276,0.0850719150109164,-0.371898879901782,-0.0452508873255882,-0.29527561237791,-0.073755694958887,0.121381285660684,0.0982847382807788,0.318131827667165,0.0153133098604916,-0.155383046113213,0.0179335482708828,0.256044280023964,-0.0723739676108687,0.211791217965701,-0.150086757649168,-0.0403480080826814,0.0325173800059979,0.111079264102876,0.110540712964998,-0.130819879967895,0.173903423970391,0.203145882061386,-0.0737677384900344,-0.0797648695268877,-0.0867786515087951,-0.290380935980816,0.0656862840341564,-0.202927277336599,-0.0141557341068118,0.0542607716535059,-0.079315683498904,-0.0468731669036688,-0.152772235966577,0.0877782698884082,-0.172879929236831,-0.0327352121415835,0.124929471504473,-0.120858229745347,-0.29506834496337,0.472399840506325,0.264119551088879,0.245428774141332,0.0295993995596491,0.0433011605796251,0.206215751808,-0.237902937084635,0.0755527388172144,0.055904532690224,-0.0073423195819998,-0.10015345382452,0.270454396464927,0.0458331609943433,-0.182515325611456,0.146514268543787,-0.253570295574515,-0.073417674643765,0.0748903839265526,0.150563833223436,0.0417809085643238,0.204055443878602,0.052684466082596,0.0148915773741314,0.219670006484306,-0.235904721502703,0.349275511831399,-0.450393341024256,0.00034952804849343,-0.176085633846216,-0.0146055979492252,0.0601838416481003,-0.199769380595471,-0.0389085019005018,0.159712479064016,0.152509494259682,0.0302728019324552,-0.215404539059127,-0.0329665747937926,-0.0752831052938407,0.107180978732757,-0.120931498600024,0.0869019028040603,0.0272817566621173,-0.0500402504613586,0.419388718239396,-0.216393360617947,-0.181019146328032,-0.147071130682993,-0.0158442267167909,0.093917760542407,0.0946391289997733,-0.115789839062363,-0.00142156966056799,-0.225649177708938,-0.0496287527111698,-0.0671961550802074,-0.160357679466839,-0.23551605176135,0.12732755441271,0.269970174719425,-0.347894048337002,0.078539986019796,0.192298567973556,0.415132175835619,-0.00639125140996903,0.00590439039708673,0.038908194712769,-0.0290411190247202,-0.0580423865020206,-0.214180108527328,-0.109717557608666,0.046687777062221,0.167727956048242,0.00537280840195328,-0.0880981153761766,0.446129234011189,0.211096284258658,-0.00418548583115169,-0.176764740159203,-0.163953251351895,0.0416270130134882,-0.0875339562869207,0.470980014416092,-0.269244262165866,0.134158796275762,0.201840025925583,-0.0383172654244311,-0.0916928369756695,-0.31360680612889,-0.031623434851078,0.0449619674193255,-0.0943386412532692,-0.134847847843951,0.120577635181696,-0.0581259346012751,0.00410771896587586,0.265778471272999,0.0506460290367689,-0.0189556658694801,0.0900454969404906,-0.131888547681041,0.148939968027106,-0.126923717355786,0.0464847648099581,0.214353316899456,-0.437949009424529,-0.0218683399910609,-0.182830217821246,-0.0873904538257551,0.114091349606301,0.132476695283869,0.165365629985151,-0.070037721177203,-0.0951671776559055,0.211034820324803,-0.294852688764193,-0.263033924719883,0.0730273025479907,-0.148297070098505,0.0598346743972974,0.126869384157037,0.110558111307358,0.283356238971905,-0.114390005624048,-0.038364728245428,-0.0903109575356978,0.00816677433480502,0.0765481761188825,0.0239677141515918,0.246367578489206,-0.0206707516356356,0.103540129736294,-0.0869720408774441,-0.0444993126365185,-0.213878511039163,-0.27339190411172,-0.0823831433110383,0.293156099705075,-0.0994969739083312,-0.248005935636739,0.0412202185362963,-0.0119445876084594,-0.0159417857876369,-0.190433526071671,0.460623776368371,0.118596848465198,-0.0316437627210087,-0.178885142797729,-0.0113875950541976,-0.182084095892301,-0.0267862635647193,-0.14704242857114,0.0618473636165678,0.0598095450690523,-0.212127972344877,0.490738092157276,0.0933803846153162,-0.168395184262179,-0.120450866173878,-0.263314971150817,-0.127723764712164,0.0782462818402466,0.0172617116860842,-0.111850446403949,-0.188438522653744,-0.0215924080709213,-0.129565342568914,-0.0889141223672018,0.125074845715144,-0.0572793817580069,0.000340797658011733,0.159370991097509,0.050479905560932,0.0201801293314832,0.513770344135953,0.168477447552834,0.24764529900343,-0.0191408679720927,0.262783415936707,0.143462104963118,-0.187001415958238,0.208892341000879,-0.0230131205845516,-0.0328659115777046,0.123875175025059,-0.0860488711019869,-0.0190778133351538,-0.280983830112098,-0.125147063610601,-0.121658290676694,0.00800673396805734,-0.0424847013726946,0.0104976580885642,-0.593016985897747,-0.0406352368672609,-0.0179484511850835,-0.163326087287406,0.137462233170758,0.1043827204446,-0.0619697439293555,-0.016067092607719,0.11310303400324,-0.0721647793464594,0.228497614411493,0.325273956290143,-0.0409234286289468,0.312368886372027,-0.0622432627207581,0.0376282642667446,-0.0296580511409329,-0.134732781888771,0.0632899926428554,0.234438127722723,0.406542987052323,0.114859951834002,-0.160768215841194,-0.295107512868667,-0.028978017920628,0.0786224733047551,0.190910502074087,-0.248705779349551,-0.0156845179496673,-0.209171057202585,-0.0224722201459169,0.126749032383282,-0.0719104070187994,0.0998270032285529,-0.286334718836761,-0.0442604250851543,-0.0063405633664801,0.174663671295765,0.104871999152133,-0.181351252785073,0.317362831259706,-0.11949150969549,-0.0307686925998087,-0.229245295409529,0.0810987968100886,-0.0151586265780695,-0.0425107066915166,0.302629577053016,-0.152874644579626,0.084863733389053,0.0426105811200426,0.200327550001169,0.111526757015019,-0.0759534174180257,0.168779568250716,0.224215665549503,0.343632659723579,0.107789731365055,-0.0328982309775512,-0.114447049026772,-0.15474543719775,-0.038165856343289,-0.0758862907358821,-0.177892190456445,-0.0427333372979799,-0.0144946135458788,0.0192950335094377,-0.122608294578318,0.195636973002661,-0.0998305119172065,-0.0335123547818789,0.189616161038388,-0.160677266622371,-0.0484739037230904,0.423270125628586,-0.496052929885242,-0.158000747982586,-0.163046768438744,-0.188738793472396,0.0511620639353463,0.0354313908728513,0.0383620361584894,-0.229019112146385,0.0707757151510603,0.0636410498891575,0.144922765033692,0.022191043888127,-0.0232284097977347,0.111229778729424,0.160641879511399,0.0535207152333674,0.273300113371123,0.0547128775434752,-0.0185714434008098,-0.163250437443246,0.0521248991546006,-0.0238550913767911,-0.00780937623202344,0.0908618246271309,-0.138809630375026,-0.0679095130109927,-0.00499989545817343,-0.216131150507896,0.246541718228519,0.406823269398961,0.0720395897158096,0.0625550467604166,0.0636537284180642,-0.0681144330567633,-0.0888281344971057,-0.0277220852006267,-0.353415402046511,-0.556233936262734,-0.069260663630338,-0.39169188739724,-0.13585121072272,0.299240939825238,0.069799734616386,0.0661860316472538,0.0414865180679814,0.100014140665131,0.0302738626969113,0.0308709885788565,0.419767792933092,-0.0155026202992456,-0.254331769775567,0.0706686972929585,-0.0254707439140282,-0.152929324561422,0.191245505226678,-0.139637905714639,0.0861517941477222,-0.257974745060412,0.0984381790102187,0.216450433144288,-0.0260033416210019,-0.338209398408114,-0.0709091827949654,0.137577294801718,0.199988166290676,0.0173288160381494,-0.160176141723607,-0.192536737978566,0.0856891788961911,0.0693075997224168,-0.20383920695648,0.230399526311356,-0.0457154403908968,0.227564404346036,0.0246412601889415,0.0450937249895999,-0.0687935969495562,-0.110755715581852,-0.0905635081602372,0.279762698750102,-0.0651672585865466,0.041931203367127,-0.210076125794157,-0.00781893244326877,0.0699882390653525,-0.142607107540109,0.00508916644652765,0.455911559357659,0.0285218302844688,0.0042698368264781,0.0445564244123919,-0.522999018065551,0.180665968332662,-0.218145950362232,0.0602439406200366,-0.061237989014243,0.119300063857523,-0.0601035355907607,-0.222801573041452,0.00777446646056771,0.17164484165924,0.0332658032012741,0.132584299676242,0.15843300057734,0.227483156370666,0.246875657691554,0.0243532424706235,-0.173814909297057,0.294453477349126,-0.0357556048301856,0.0836807008341941,0.128775850037983,0.0163151116181015,-0.0177560929527622,0.289981645355261,-0.0516623828552132,0.243884047176158,0.0361135479314151,0.0827194737616244,-0.154804200848584,-0.0826287733541386,-0.483564233798712,-0.132955135612577,-0.267937558053789,-0.231573806248831,-0.13958826863872,0.0623393122028521,-0.0324069632862559,-0.0585807970251143,-0.100870382330403,0.120117683273826,-0.098973706494722,-0.234558433876748,0.149321043176848,0.000210390621165442,0.000812100801092063,0.0865690611667474,-0.117265611420618,0.125395866259664,-0.10717933043731,0.529310712608559,0.0369240568056467,0.00342504865351012,0.101432744790689,-0.307801705498375,-0.0391122525263022,-0.0852737983759619,-0.113204445658652,0.117421084537935,-0.104364731998723,0.0257566255248142,0.215833193901185,0.121004133357795,-0.0925660307562124,-0.0350339402993969,0.396212012479508,0.108568930027996,-0.0920974250391703,-0.110024237804327,-0.313935828679601,0.0941238178078758,-0.0793047048314926,-0.0576689081801613,-0.10225390543535,0.130432733873088,-0.336345656275617,0.195444744152806,0.315157086375062,-0.1157692040539,-0.0255398442776234,0.0296394173493609,0.25495439785082,-0.0868471313214033,-0.00426088288776713,-0.0551453910773283,0.0307008521034569,0.212055169051899,-0.0293261966652907,-0.102482369739111,0.139649306646585,0.0987627818433724,0.143136534700389,-0.188186871766548,0.0874056464167735,0.0715807575669641,-0.0574282722710073,-0.193487786402266,0.0468289903061835,-0.455618959621885,-0.170226644288673,0.0109401442984448,0.186093316056822,-0.0530132498959159,-0.0509876595339411,0.0883893244788805,-0.00208938204172927,0.184777108128621,-0.505105731482053,-0.162587275744496,0.0228466293715051,0.0199662149792852,0.116556785724667,-0.261933768419444,-0.109553036218857,-0.294041550828098,-0.0158329334094419,-0.00703708707894713,-0.126719223959614,0.167594419054484,-0.0893787875377259,0.505140602933429,-0.196553281515326,-0.0972213870619341,-0.0872666381779722,0.0651738877424072,0.406258207063463,0.0428856858735294,-0.26697655076465,0.0534855764318949,0.228595592555056,0.119557325201887,-0.00450635401671955,-0.0316667942874089,0.0161692037269365,-0.15205150979716,-0.0244298318314737,0.143487670968691,-0.101528048467934,0.224458244422985,-0.102891986933018,0.158408527804148,0.28599869313412,-0.248868602814259,0.0302095734436606,0.170910187187372,0.169327439084512,-0.0731342936425276,-0.000851942007588689,-0.14455391376119,-0.202235534389022,-0.0917173748969285,0.0510285606649397,-0.249845978950798,-0.0296566795238025,-0.0570936537621097,0.0827518078050388,-0.00213442699512462,-0.161869451061658,0.0675744968557655,-0.522716213743809,-0.088578526925852,0.060055374713632,0.486309432128307,0.120781763825355,0.0920784779691873,-0.0243501506188051,-0.165852371892432,0.0497839760894467,0.0829392938765434,0.0383848833543439,0.0549860587600648,0.0619305682894713,0.124056952006793,-0.00377451778690909,-0.459575955317136,0.167279201732426,-0.128336810120484,-0.059215815222512,-0.00477838521913648,0.0978082406221246,0.167357843984088,0.276833393512746,-0.235513314964357,-0.0399104783044516,-0.144562307511893,-0.168160803648569,-0.0852270542212578,0.135957278293912,-0.0265020080791547,0.313807851221271,-0.136677195558768,-0.110212802738839,0.201065046759339,0.237771585700487,-0.240704656394375,0.066782326688729,0.0669586929315033,0.119649417928096,-0.086276461546494,0.0802418360463297,-0.0404249541905045,0.14169786671172,-0.347789062163594,0.12037504884887,-0.0502622509979004,0.127632980116255,-0.49361466020665,0.125060071173645,0.0598185626344473,0.0412833899018432,0.00629110579462925,0.18201076965035,0.00990609336137073,0.195917762443991,-0.0539414597073744,0.0975652343366833,0.471154110764627,-0.0851294891930468,0.0279183788074342,0.00758684214039284,0.059433262361996,-0.418198261879586,-0.0546484467446961,0.209975780568123,0.0741728532766609,-0.0457117564209259,0.14939762227928,-0.203825014228052,0.0239362184399523,-0.157367159349328,0.00181047338460444,-0.0347259608718434,-0.157129435301393,0.0228129985484124,0.078873373578166,-0.218003988662068,0.0340935180387025,0.157220714379128,0.085392577355971,0.0966549479745065,-0.852943044128652,-0.00233779683275337,0.14595802559388,-0.057995959282028,-0.0556199735388589,0.054533107216921,0.0859451627302237,0.103293059621749,-0.187260181348609,-0.00285101346745956,0.100144238321095,0.0722420919843476,0.038625556659374,-0.206534205176692,0.0610443231462072,0.021762630234614,0.0311868959554718,0.0545954140030141,0.149390267865927,0.0746483568369931,0.0997739243601837,-0.0200513188857561,0.120586046770515,0.0303731196816013,-0.0875971592275215,0.00881646509506815,-0.0247096865726452,-0.128380105364518
    };

    ///array of real parts + array of imaginary parts
    double eval[STATE_SIZE] = {
            -3.5527136788005e-14,-12.0255182711093,-12.3731217793685,-12.7814773348993,-12.9391810964685,-13.2731906071197,-13.424988767775,-13.47617675303,-13.7621380589211,-14.2640822567527,-14.3985610825929,-14.563753774805,-14.8366257502902,-14.9540462842011,-15.2130406183746,-15.373963632111,-15.5498517892122,-15.8596907756144,-16.0326091580417,-16.3878592218423,-16.5972344481801,-16.7927231475906,-17.0225076247546,-17.385327229244,-17.4662869717357,-17.8345315671866,-17.9306658944476,-18.295438638087,-18.6558300276551,-18.9093752801296,-19.2949899304867,-19.9518031588295
    };

    ///Q^T matrix
    double Q[STATE_SIZE * STATE_SIZE] = {
            -14.8030923281331,0.207157449331135,0.674989679362625,0.403965384466574,0.53029696107842,0.152487984858453,0.141418197192252,0.191143112257123,0.152587173972279,0.887613411294296,0.797460894100368,0.383896808605641,0.915473969886079,0.279621819965541,0.346549167996272,0.14289187034592,0.841198849491775,0.704045646125451,0.95655925385654,0.933335849782452,0.771959060570225,0.302974875550717,0.696584686869755,0.51105371513404,0.240078909089789,0.177224905928597,0.388491304125637,0.364679945632815,0.0692099283915013,0.172804569592699,0.801923443563282,0.663413499714807,0.207157449331135,-15.8385881306604,0.862724364968017,0.170624090125784,0.975732607766986,0.035088024334982,0.406050314893946,0.756994087249041,0.90546303242445,0.454567750915885,0.922664157114923,0.183139169821516,0.416010931134224,0.492628782521933,0.248159773414955,0.329236012650654,0.725724069168791,0.709872165462002,0.164144072448835,0.89333344087936,0.721628771396354,0.747378953266889,0.336861748714,0.539376187603921,0.0200570572633296,0.452012907713652,0.821617706911638,0.806269636610523,0.415946318069473,0.129123904742301,0.116425348911434,0.872575292829424,0.674989679362625,0.862724364968017,-17.0322181098163,0.876439346699044,0.831993991043419,0.983126569306478,0.123278650688007,0.930127918720245,0.75321610760875,0.96897287084721,0.0440589087083936,0.650613932637498,0.851188083179295,0.00429112860001624,0.0794379266444594,0.80588909634389,0.260602075373754,0.160226090345532,0.180072232149541,0.34943274804391,0.989183023339137,0.83152644126676,0.63355187815614,0.0547705853823572,0.666871576337144,0.423675562953576,0.617576259654015,0.684381045866758,0.212197515647858,0.910691004013643,0.312949022743851,0.304162473184988,0.403965384466574,0.170624090125784,0.876439346699044,-15.3157517162617,0.983791405102238,0.575697488617152,0.793885040329769,0.0538773911539465,0.112411572597921,0.00281271454878151,0.371352839516476,0.438710586400703,0.482620244612917,0.729822016786784,0.104665609076619,0.86023065331392,0.0401021423749626,0.57931962958537,0.613443094771355,0.979001633822918,0.00332873081788421,0.732530116569251,0.525085654808208,0.678939103148878,0.440869592828676,0.384808729868382,0.630678800866008,0.353703865315765,0.697999411961064,0.763573322445154,0.520182562293485,0.411278941435739,0.53029696107842,0.975732607766986,0.831993991043419,0.983791405102238,-18.6458452511579,0.209149486385286,0.803798166336492,0.108583583729342,0.319399437168613,0.674557421822101,0.942564790835604,0.703661621548235,0.19575294922106,0.265117973554879,0.636909784981981,0.859983401373029,0.557100543286651,0.262899972731248,0.581600941950455,0.73301282338798,0.735854286467656,0.899540644139051,0.752710361266509,0.757241941988468,0.904499096563086,0.65327710728161,0.829925845144317,0.680437547154725,0.196279037045315,0.449092417722568,0.372591530904174,0.238487572176382,0.152487984858453,0.035088024334982,0.983126569306478,0.575697488617152,0.209149486385286,-14.3695946300868,0.653874792391434,0.0136260520666838,0.881422396516427,0.774027382023633,0.0969958088826388,0.441353030269966,0.930207984289154,0.00819552130997181,0.53797256317921,0.341971888206899,0.667296157451347,0.60321207344532,0.213690056232736,0.319463124964386,0.915598744060844,0.611172407865524,0.31528914696537,0.540042083710432,0.0544064759742469,0.110327219357714,0.637417324120179,0.333434764994308,0.771446153754368,0.631564155686647,0.250347369350493,0.759690399514511,0.141418197192252,0.406050314893946,0.123278650688007,0.793885040329769,0.803798166336492,0.653874792391434,-16.0210919736419,0.0493806877639145,0.113144566770643,0.0470388829708099,0.98415376082994,0.678050716174766,0.897255460498855,0.557190095772967,0.0664008532185107,0.72596702282317,0.392193721141666,0.83130986825563,0.109174828510731,0.460149798775092,0.728580788476393,0.274133467813954,0.406564011937007,0.787175731500611,0.291257924167439,0.932337339967489,0.0478639779612422,0.86395154078491,0.578967442503199,0.83584210742265,0.854375223862007,0.58632699190639,0.191143112257123,0.756994087249041,0.930127918720245,0.0538773911539465,0.108583583729342,0.0136260520666838,0.0493806877639145,-14.1513684899546,0.477837181417271,0.213983570458367,0.432970190420747,0.569670646218583,0.0509287735912949,0.910967865260318,0.860007540555671,0.104668560437858,0.390019047539681,0.720483851851895,0.791451416444033,0.135376650840044,0.267453148961067,0.182920687133446,0.315067628864199,0.576310960343108,0.654546046862379,0.302763455081731,0.887903396273032,0.709280596580356,0.829400165239349,0.500831536017358,0.508443876868114,0.654348863754421,0.152587173972279,0.90546303242445,0.75321610760875,0.112411572597921,0.319399437168613,0.881422396516427,0.113144566770643,0.477837181417271,-14.1481807709206,0.226589619880542,0.366067794151604,0.446077849017456,0.16385965491645,0.334832005901262,0.364109267480671,0.364093453856185,0.243348302785307,0.0891349397134036,0.813269312027842,0.212156835244969,0.342836658004671,0.369401918025687,0.876741543412209,0.0705523632932454,0.833970257546753,0.303599824430421,0.927930071484298,0.292406287509948,0.83939350838773,0.620142036583275,0.902410588227212,0.429775210563093,0.887613411294296,0.454567750915885,0.96897287084721,0.00281271454878151,0.674557421822101,0.774027382023633,0.0470388829708099,0.213983570458367,0.226589619880542,-15.5504858714994,0.935578790027648,0.373866642592475,0.497507116291672,0.775266358163208,0.346319438889623,0.0961447078734636,0.312083947705105,0.392792160855606,0.942091584438458,0.280731286620721,0.198665955336764,0.727645715000108,0.95643507828936,0.931838406948373,0.301845223177224,0.407885305117816,0.198481849627569,0.286857396829873,0.859632262261584,7.36045185476542e-05,0.60670926142484,0.871870154747739,0.797460894100368,0.922664157114923,0.0440589087083936,0.371352839516476,0.942564790835604,0.0969958088826388,0.98415376082994,0.432970190420747,0.366067794151604,0.935578790027648,-15.7320266726892,0.426477298606187,0.295118942623958,0.333300480153412,0.598295152653009,0.471836182754487,0.330803585937247,0.730999719817191,0.144850598881021,0.71945658675395,0.734235236188397,0.817405614769086,0.689761403948069,0.775555139407516,0.0840903888456523,0.0474210453685373,0.0422894649673253,0.553403669502586,0.250165862496942,0.556058232206851,0.291614870773628,0.94501926144585,0.383896808605641,0.183139169821516,0.650613932637498,0.438710586400703,0.703661621548235,0.441353030269966,0.678050716174766,0.569670646218583,0.446077849017456,0.373866642592475,0.426477298606187,-13.3721755668521,0.48945991252549,0.316029489738867,0.108527328120545,0.315123851876706,0.0684272006619722,0.968460410134867,0.0144414354581386,0.258857969194651,0.654955295845866,0.630294714123011,0.0580938996281475,0.437784053152427,0.110183613374829,0.758131679147482,0.151558594545349,0.111564433900639,0.933200485771522,0.286591770127416,0.764984895708039,0.639986231923103,0.915473969886079,0.416010931134224,0.851188083179295,0.482620244612917,0.19575294922106,0.930207984289154,0.897255460498855,0.0509287735912949,0.16385965491645,0.497507116291672,0.295118942623958,0.48945991252549,-17.3226923956536,0.777909284923226,0.51558287255466,0.675662054680288,0.220975440228358,0.733835875056684,0.67699415050447,0.159242485882714,0.388616922544315,0.594887868501246,0.524834875715896,0.972225036472082,0.459279633127153,0.90588356461376,0.72613523923792,0.811068495502695,0.174274100689217,0.790934702381492,0.275270455982536,0.753695314284414,0.279621819965541,0.492628782521933,0.00429112860001624,0.729822016786784,0.265117973554879,0.00819552130997181,0.557190095772967,0.910967865260318,0.334832005901262,0.775266358163208,0.333300480153412,0.316029489738867,0.777909284923226,-14.3608204023913,0.372404548339546,0.410306565230712,0.893441342981532,0.934013072634116,0.0289523873943835,0.313170951325446,0.746097426395863,0.752214959124103,0.859965648502111,0.659646914806217,0.575755519559607,0.170484730508178,0.0657610560301691,0.16468235803768,0.849948034156114,0.372107424307615,0.132017188938335,0.274677451467142,0.346549167996272,0.248159773414955,0.0794379266444594,0.104665609076619,0.636909784981981,0.53797256317921,0.0664008532185107,0.860007540555671,0.364109267480671,0.346319438889623,0.598295152653009,0.108527328120545,0.51558287255466,0.372404548339546,-14.4382627876475,0.302729092771187,0.230344030540437,0.773451789747924,0.347021585330367,0.509018544340506,0.600707167061046,0.757286258740351,0.761953725712374,0.679325693054125,0.20353390625678,0.848539520520717,0.143144130241126,0.593992463080212,0.355492479866371,0.655657382216305,0.495774961542338,0.99494822951965,0.14289187034592,0.329236012650654,0.80588909634389,0.86023065331392,0.859983401373029,0.341971888206899,0.72596702282317,0.104668560437858,0.364093453856185,0.0961447078734636,0.471836182754487,0.315123851876706,0.675662054680288,0.410306565230712,0.302729092771187,-14.827653774526,0.46223779511638,0.664742107037455,0.166391085833311,0.674590074224398,0.953825746430084,0.375515910796821,0.809885409194976,0.218150125350803,0.0490862673614174,0.532248513307422,0.893720725085586,0.411586156347767,0.539759787730873,0.148340160259977,0.746418644208461,0.374420851701871,0.841198849491775,0.725724069168791,0.260602075373754,0.0401021423749626,0.557100543286651,0.667296157451347,0.392193721141666,0.390019047539681,0.243348302785307,0.312083947705105,0.330803585937247,0.0684272006619722,0.220975440228358,0.893441342981532,0.230344030540437,0.46223779511638,-13.2428817497566,0.851598515175283,0.627529887715355,0.766623704927042,0.074386975960806,0.178772744024172,0.00539691257290542,0.605536248302087,0.592145875794813,0.489992269780487,0.113595361821353,0.686072814976797,0.649525197921321,0.709493486443534,0.24221326992847,0.0141002326272428,0.704045646125451,0.709872165462002,0.160226090345532,0.57931962958537,0.262899972731248,0.60321207344532,0.83130986825563,0.720483851851895,0.0891349397134036,0.392792160855606,0.730999719817191,0.968460410134867,0.733835875056684,0.934013072634116,0.773451789747924,0.664742107037455,0.851598515175283,-17.3531099301763,0.337954384274781,0.890107094077393,0.338203680468723,0.229571665637195,0.956111317500472,0.467030136846006,0.485698713222519,0.210215653758496,0.492557974299416,0.613387235673144,0.330013146623969,0.426354733528569,0.512473328271881,0.353032978018746,0.95655925385654,0.164144072448835,0.180072232149541,0.613443094771355,0.581600941950455,0.213690056232736,0.109174828510731,0.791451416444033,0.813269312027842,0.942091584438458,0.144850598881021,0.0144414354581386,0.67699415050447,0.0289523873943835,0.347021585330367,0.166391085833311,0.627529887715355,0.337954384274781,-13.6725779606495,0.753400478744879,0.220258690183982,0.112459921743721,0.239802360069007,0.726685181958601,0.875981888500974,0.726004907861352,0.35758897755295,0.167472446570173,0.511803943663836,0.597513518761843,0.0122081234585494,0.661765213357285,0.933335849782452,0.89333344087936,0.34943274804391,0.979001633822918,0.73301282338798,0.319463124964386,0.460149798775092,0.135376650840044,0.212156835244969,0.280731286620721,0.71945658675395,0.258857969194651,0.159242485882714,0.313170951325446,0.509018544340506,0.674590074224398,0.766623704927042,0.890107094077393,0.753400478744879,-16.7186005960684,0.141741932369769,0.85307931038551,0.903301550308242,0.690597920212895,0.776119016343728,0.42959459987469,0.0618650016840547,0.511405270779505,0.94152497430332,0.0679500568658113,0.268018338596448,0.732940542511642,0.771959060570225,0.721628771396354,0.989183023339137,0.00332873081788421,0.735854286467656,0.915598744060844,0.728580788476393,0.267453148961067,0.342836658004671,0.198665955336764,0.734235236188397,0.654955295845866,0.388616922544315,0.746097426395863,0.600707167061046,0.953825746430084,0.074386975960806,0.338203680468723,0.220258690183982,0.141741932369769,-14.2098720076028,0.118634451879188,0.583607438020408,0.20387312117964,0.0367344922851771,0.398929722839966,0.313278448535129,0.0157108204439282,0.97023272770457,0.0701400111429393,0.725883333710954,0.244729198981076,0.302974875550717,0.747378953266889,0.83152644126676,0.732530116569251,0.899540644139051,0.611172407865524,0.274133467813954,0.182920687133446,0.369401918025687,0.727645715000108,0.817405614769086,0.630294714123011,0.594887868501246,0.752214959124103,0.757286258740351,0.375515910796821,0.178772744024172,0.229571665637195,0.112459921743721,0.85307931038551,0.118634451879188,-16.3588624149561,0.681128628784791,0.436375434976071,0.7758764391765,0.509291885886341,0.651390804210678,0.116989660542458,0.277790386695415,0.513920687139034,0.42052434082143,0.876225500367582,0.696584686869755,0.336861748714,0.63355187815614,0.525085654808208,0.752710361266509,0.31528914696537,0.406564011937007,0.315067628864199,0.876741543412209,0.95643507828936,0.689761403948069,0.0580938996281475,0.524834875715896,0.859965648502111,0.761953725712374,0.809885409194976,0.00539691257290542,0.956111317500472,0.239802360069007,0.903301550308242,0.583607438020408,0.681128628784791,-16.8900332180783,0.19628684502095,0.170036551775411,0.86307844473049,0.569452023366466,0.416283306898549,0.732969297328964,0.445223399903625,0.0989155832212418,0.509052856592461,0.51105371513404,0.539376187603921,0.0547705853823572,0.678939103148878,0.757241941988468,0.540042083710432,0.787175731500611,0.576310960343108,0.0705523632932454,0.931838406948373,0.775555139407516,0.437784053152427,0.972225036472082,0.659646914806217,0.679325693054125,0.218150125350803,0.605536248302087,0.467030136846006,0.726685181958601,0.690597920212895,0.20387312117964,0.436375434976071,0.19628684502095,-15.7661762877833,0.29516760725528,0.45726556237787,0.413745638215914,0.200678155757487,0.106217114022002,0.359411156037822,0.849613083526492,0.567705040797591,0.240078909089789,0.0200570572633296,0.666871576337144,0.440869592828676,0.904499096563086,0.0544064759742469,0.291257924167439,0.654546046862379,0.833970257546753,0.301845223177224,0.0840903888456523,0.110183613374829,0.459279633127153,0.575755519559607,0.20353390625678,0.0490862673614174,0.592145875794813,0.485698713222519,0.875981888500974,0.776119016343728,0.0367344922851771,0.7758764391765,0.170036551775411,0.29516760725528,-12.9507849297952,0.385920506669208,0.57277093292214,0.235741645330563,0.643966387957335,0.0250460442621261,0.860345292603597,0.328902047360316,0.177224905928597,0.452012907713652,0.423675562953576,0.384808729868382,0.65327710728161,0.110327219357714,0.932337339967489,0.302763455081731,0.303599824430421,0.407885305117816,0.0474210453685373,0.758131679147482,0.90588356461376,0.170484730508178,0.848539520520717,0.532248513307422,0.489992269780487,0.210215653758496,0.726004907861352,0.42959459987469,0.398929722839966,0.509291885886341,0.86307844473049,0.45726556237787,0.385920506669208,-15.3741148328409,0.872412286698818,0.653671982465312,0.0760978939943016,0.782009624876082,0.822771187638864,0.286236892221496,0.388491304125637,0.821617706911638,0.617576259654015,0.630678800866008,0.829925845144317,0.637417324120179,0.0478639779612422,0.887903396273032,0.927930071484298,0.198481849627569,0.0422894649673253,0.151558594545349,0.72613523923792,0.0657610560301691,0.143144130241126,0.893720725085586,0.113595361821353,0.492557974299416,0.35758897755295,0.0618650016840547,0.313278448535129,0.651390804210678,0.569452023366466,0.413745638215914,0.57277093292214,0.872412286698818,-15.2554922592826,0.56118715624325,0.552266235928982,0.547425446100533,0.574582633096725,0.590877592330799,0.364679945632815,0.806269636610523,0.684381045866758,0.353703865315765,0.680437547154725,0.333434764994308,0.86395154078491,0.709280596580356,0.292406287509948,0.286857396829873,0.553403669502586,0.111564433900639,0.811068495502695,0.16468235803768,0.593992463080212,0.411586156347767,0.686072814976797,0.613387235673144,0.167472446570173,0.511405270779505,0.0157108204439282,0.116989660542458,0.416283306898549,0.200678155757487,0.235741645330563,0.653671982465312,0.56118715624325,-12.8663712849375,0.0468266836833209,0.00484179030172527,0.515689143212512,0.0987129684071988,0.0692099283915013,0.415946318069473,0.212197515647858,0.697999411961064,0.196279037045315,0.771446153754368,0.578967442503199,0.829400165239349,0.83939350838773,0.859632262261584,0.250165862496942,0.933200485771522,0.174274100689217,0.849948034156114,0.355492479866371,0.539759787730873,0.649525197921321,0.330013146623969,0.511803943663836,0.94152497430332,0.97023272770457,0.277790386695415,0.732969297328964,0.106217114022002,0.643966387957335,0.0760978939943016,0.552266235928982,0.0468266836833209,-14.9021697270218,0.0175384413450956,0.215895464643836,0.256189337233081,0.172804569592699,0.129123904742301,0.910691004013643,0.763573322445154,0.449092417722568,0.631564155686647,0.83584210742265,0.500831536017358,0.620142036583275,7.36045185476542e-05,0.556058232206851,0.286591770127416,0.790934702381492,0.372107424307615,0.655657382216305,0.148340160259977,0.709493486443534,0.426354733528569,0.597513518761843,0.0679500568658113,0.0701400111429393,0.513920687139034,0.445223399903625,0.359411156037822,0.0250460442621261,0.782009624876082,0.547425446100533,0.00484179030172527,0.0175384413450956,-13.6686851978302,0.96554358350113,0.312844887375832,0.801923443563282,0.116425348911434,0.312949022743851,0.520182562293485,0.372591530904174,0.250347369350493,0.854375223862007,0.508443876868114,0.902410588227212,0.60670926142484,0.291614870773628,0.764984895708039,0.275270455982536,0.132017188938335,0.495774961542338,0.746418644208461,0.24221326992847,0.512473328271881,0.0122081234585494,0.268018338596448,0.725883333710954,0.42052434082143,0.0989155832212418,0.849613083526492,0.860345292603597,0.822771187638864,0.574582633096725,0.515689143212512,0.215895464643836,0.96554358350113,-15.9480667926837,0.910950841149315,0.663413499714807,0.872575292829424,0.304162473184988,0.411278941435739,0.238487572176382,0.759690399514511,0.58632699190639,0.654348863754421,0.429775210563093,0.871870154747739,0.94501926144585,0.639986231923103,0.753695314284414,0.274677451467142,0.99494822951965,0.374420851701871,0.0141002326272428,0.353032978018746,0.661765213357285,0.732940542511642,0.244729198981076,0.876225500367582,0.509052856592461,0.567705040797591,0.328902047360316,0.286236892221496,0.590877592330799,0.0987129684071988,0.256189337233081,0.312844887375832,0.910950841149315,-16.518942869501
    };

//    double Q2[4 * 4 * 2] = {
//            1.8367333, -0.6122443, -0.4081629, -0.8163261,
//            -0.2040814,  1.4285705, -0.4081632, -0.8163259,
//            -0.2040814, -0.6122447,  1.6326522, -0.8163261,
//            -0.2040814, -0.6122446, -0.4081630,  1.2244890,
//            1.8367333, -0.6122443, -0.4081629, -0.8163261,
//            -0.2040814,  1.4285705, -0.4081632, -0.8163259,
//            -0.2040814, -0.6122447,  1.6326522, -0.8163261,
//            -0.2040814, -0.6122446, -0.4081630,  1.2244890
//    };

    std::vector<double> scaledQ(STATE_SIZE * STATE_SIZE);
    std::vector<double> scaledQ2(STATE_SIZE * STATE_SIZE);
//    std::vector<double> scaledQT(4 * 4 * 2);

    for (int rate = 0; rate < rateCategoryCount; ++rate) {
        for (int entry = 0; entry < STATE_SIZE * STATE_SIZE; ++entry) {
            scaledQ[entry + rate * STATE_SIZE * STATE_SIZE] = Q[entry + rate * STATE_SIZE * STATE_SIZE] * rates[rate];
            scaledQ2[entry + rate * STATE_SIZE * STATE_SIZE] = Q[entry + rate * STATE_SIZE * STATE_SIZE] * rates[rate] * rates[rate];
        }
    }

    // set the Eigen decomposition
    beagleSetEigenDecomposition(instance, 0, evec, ivec, eval);

    // a list of indices and edge lengths
    int nodeIndices[4] = { 0, 1, 2, 3 };
//    double edgeLengths[4] = { 0.6, 0.6, 1.3, 0.7};
    double edgeLengths[4] = { 1.0, 1.0, 1.0, 1.0};

    // tell BEAGLE to populate the transition matrices for the above edge lengths
    beagleUpdateTransitionMatrices(instance,     // instance
                                   0,             // eigenIndex
                                   nodeIndices,   // probabilityIndices
                                   NULL,          // firstDerivativeIndices
                                   NULL,          // secondDervativeIndices
                                   edgeLengths,   // edgeLengths
                                   4);            // count

    beagleSetTransitionMatrix(instance, 4, scaledQ.data(), 0.0);
    beagleSetTransitionMatrix(instance, 5, scaledQ2.data(), 0.0);

    int originalIndices[6]  = { 0, 1, 2, 3, 4, 5 };
    int transposeIndices[6] = { 6, 7, 8, 9, 10, 11 };

    beagleTransposeTransitionMatrices(instance, originalIndices, transposeIndices, 6);

    double* matrix1 = (double*) malloc(sizeof(double) * STATE_SIZE * STATE_SIZE * rateCategoryCount);
    double* matrix2 = (double*) malloc(sizeof(double) * STATE_SIZE * STATE_SIZE * rateCategoryCount);

    beagleGetTransitionMatrix(instance, 0, matrix1);
    beagleGetTransitionMatrix(instance, 6, matrix2);

    int nodeId = 0;
    std::cout << "Matrix for node " << nodeId << std::endl;
    double* mat = matrix1;
    {
        int offset = 0;
        for (int r = 0; r < rateCategoryCount; r++) {
            std::cout << "  rate category" << r + 1 << ": \n";
            for (int i = 0; i < STATE_SIZE; i++) {
                for (int j = 0; j < STATE_SIZE; j++) {
                    std::cout << mat[offset++] << ", ";
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }
    }

    std::cout << "Matrix-transpose for node " << nodeId << std::endl;
    mat = matrix2;
    {
        int offset = 0;
        for (int r = 0; r < rateCategoryCount; r++) {
            std::cout << "  rate category" << r + 1 << ": \n";
            for (int i = 0; i < STATE_SIZE; i++) {
                for (int j = 0; j < STATE_SIZE; j++) {
                    std::cout << mat[offset++] << ", ";
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }
    }

    // create a list of partial likelihood update operations
    // the order is [dest, destScaling, source1, matrix1, source2, matrix2]
    BeagleOperation operations[2] = {
            3, (scaling ? 0 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 0, 0, 1, 1,
            4, (scaling ? 1 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 2, 2, 3, 3
    };

    int rootIndex = 4;

    // update the partials
    beagleUpdatePartials(instance,      // instance
                         operations,     // eigenIndex
                         2,              // operationCount
                         BEAGLE_OP_NONE);          // cumulative scaling index

    ///XJ: I decided to store the pre-order partials vector in reverse order as those of post-orders
    ///This means that the two indices to the partials of root nodes are adjacent.
    ///For any node, the indices of the two partials sum to 2*(partialsBufferCount + compactBufferCount) - 1


    int categoryWeightsIndex = 0;
    int stateFrequencyIndex = 0;
    int transpose = (STATE_SIZE == 4 || !useGpu) ? 0 : 6;
    // create a list of partial likelihood update operations
    // the order is [dest, destScaling, source1, matrix1, source2, matrix2]
    // destPartials point to the pre-order partials
    // partials1 = pre-order partials of the parent node
    // matrices1 = Ptr matrices of the current node (to the parent node)
    // partials2 = post-order partials of the sibling node
    // matrices2 = Ptr matrices of the sibling node (to the parent node)
    BeagleOperation pre_order_operations[4] = {
            6, (scaling ? 3 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 5, 3 + transpose, 2, 2,
            7, (scaling ? 4 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 5, 2 + transpose, 3, 3,
            8, (scaling ? 5 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 6, 1 + transpose, 0, 0,
            9, (scaling ? 6 : BEAGLE_OP_NONE), BEAGLE_OP_NONE, 6, 0 + transpose, 1, 1,
    };

    int rootPreIndex = 5;

    double *patternLogLik = (double*)malloc(sizeof(double) * nPatterns);

    int cumulativeScalingIndex = (scaling ? 2 : BEAGLE_OP_NONE);

    if (scaling) {
        int scalingFactorsCount = 2;
        int scalingFactorsIndices[2] = {0, 1};

        beagleResetScaleFactors(instance,
                                cumulativeScalingIndex);

        beagleAccumulateScaleFactors(instance,
                                     scalingFactorsIndices,
                                     scalingFactorsCount,
                                     cumulativeScalingIndex);
    }

    double logL = 0.0;

    // calculate the site likelihoods at the root node
    beagleCalculateRootLogLikelihoods(instance,               // instance
                                      (const int *)&rootIndex,// bufferIndices
                                      &categoryWeightsIndex,                // weights
                                      &stateFrequencyIndex,                  // stateFrequencies
                                      &cumulativeScalingIndex,// cumulative scaling index
                                      1,                      // count
                                      &logL);         // outLogLikelihoods


    std::vector<double> siteLogLikelihoods(nPatterns);
    beagleGetSiteLogLikelihoods(instance, siteLogLikelihoods.data());

    std::cout << "site-log-like:";
    for (double logLike : siteLogLikelihoods) {
        std::cout << " " << logLike;
    }
    std::cout << std::endl;

    double * seerootPartials = (double*) malloc(sizeof(double) * STATE_SIZE * nPatterns * rateCategoryCount);
    int offset = 0;
    for (int c = 0; c < rateCategoryCount; ++c) {
        for (int p = 0; p < nPatterns; ++p) {
            for (int s = 0; s < STATE_SIZE; ++s) {
                seerootPartials[offset++] = freqs[s];
            }
        }
    }
    beagleSetPartials(instance, rootPreIndex, seerootPartials);
    fprintf(stdout, "Setting preroot: %d\n", rootPreIndex);

    double * seepostPartials = (double*) malloc(sizeof(double) * STATE_SIZE * nPatterns * rateCategoryCount);

    for(int i = 0; i < 2; i++){
        int postBufferIndex = 4-i;
        int preBufferIndex = 5+i;

        std::cout<<"Post-order Partial for node "<< 4-i << ": \n";

        beagleGetPartials(instance, postBufferIndex, BEAGLE_OP_NONE, seepostPartials);
        int l = 0;
        for(int s = 0; s < rateCategoryCount; s++){
            std::cout<<"  rate category"<< s+1<< ": \n";
            for(int k = 0; k<nPatterns; k++){
                for(int j=0; j < STATE_SIZE; j++){
                    std::cout<<seepostPartials[l++]<<", ";
                }
                std::cout<<std::endl;
            }
            std::cout<<std::endl;
        }
    }

    free(patternWeights);

    free(patternLogLik);
    free(seepostPartials);
    free(seerootPartials);
    free(matrix1);
    free(matrix2);

    beagleFinalizeInstance(instance);

#ifdef _WIN32
    std::cout << "\nPress ENTER to exit...\n";
    fflush( stdout);
    fflush( stderr);
    getchar();
#endif

}

//Gradient:
//-0.248521  -0.194621  -0.248521  0.36811
//-0.248521  -0.194621  -0.248521  0.114741
//0.221279  -0.171686  0.221279  -0.00658093
//0.22128  -0.171686  0.22128  -0.00658095
